// Copyright 2014 tsuru authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package app

import (
	"sort"

	"github.com/tsuru/config"
	appTypes "github.com/tsuru/tsuru/types/app"
	"gopkg.in/check.v1"
)

func (s *S) TestPlanAdd(c *check.C) {
	p := appTypes.Plan{
		Name:     "plan1",
		Memory:   9223372036854775807,
		Swap:     1024,
		CpuShare: 100,
	}
	err := SavePlan(p)
	c.Assert(err, check.IsNil)
	plan, err := PlanService().FindByName(p.Name)
	c.Assert(err, check.IsNil)
	c.Assert(*plan, check.DeepEquals, p)
}

func (s *S) TestPlanAddInvalid(c *check.C) {
	invalidPlans := []appTypes.Plan{
		{
			Memory:   9223372036854775807,
			Swap:     1024,
			CpuShare: 100,
		},
		{
			Name:     "plan1",
			Memory:   9223372036854775807,
			Swap:     1024,
			CpuShare: 1,
		},
		{
			Name:     "plan1",
			Memory:   4,
			Swap:     1024,
			CpuShare: 100,
		},
	}
	expectedError := []error{appTypes.PlanValidationError{Field: "name"}, appTypes.ErrLimitOfCpuShare, appTypes.ErrLimitOfMemory}
	for i, p := range invalidPlans {
		err := SavePlan(p)
		c.Assert(err, check.FitsTypeOf, expectedError[i])
	}
}

func (s *S) TestPlanAddDupp(c *check.C) {
	p := appTypes.Plan{
		Name:     "plan1",
		Memory:   9223372036854775807,
		Swap:     1024,
		CpuShare: 100,
	}
	err := SavePlan(p)
	c.Assert(err, check.IsNil)
	err = SavePlan(p)
	c.Assert(err, check.Equals, appTypes.ErrPlanAlreadyExists)
}

func (s *S) TestPlanAddAsDefault(c *check.C) {
	err := PlanService().Delete(s.defaultPlan)
	c.Assert(err, check.IsNil)
	p := appTypes.Plan{
		Name:     "plan1",
		Memory:   9223372036854775807,
		Swap:     1024,
		CpuShare: 100,
		Default:  true,
	}
	err = SavePlan(p)
	c.Assert(err, check.IsNil)
	p.Name = "plan2"
	err = SavePlan(p)
	c.Assert(err, check.IsNil)
	plan1, err := PlanService().FindByName("plan1")
	c.Assert(err, check.IsNil)
	c.Assert(plan1.Default, check.Equals, false)
	plan2, err := PlanService().FindByName("plan2")
	c.Assert(err, check.IsNil)
	c.Assert(plan2.Default, check.Equals, true)

}

type planList []appTypes.Plan

func (l planList) Len() int           { return len(l) }
func (l planList) Swap(i, j int)      { l[i], l[j] = l[j], l[i] }
func (l planList) Less(i, j int) bool { return l[i].Name < l[j].Name }

func (s *S) TestPlansList(c *check.C) {
	expected := []appTypes.Plan{
		s.defaultPlan,
		{Name: "plan1", Memory: 1, Swap: 2, CpuShare: 3},
		{Name: "plan2", Memory: 3, Swap: 4, CpuShare: 5},
	}
	err := PlanService().Insert(expected[1])
	c.Assert(err, check.IsNil)
	err = PlanService().Insert(expected[2])
	c.Assert(err, check.IsNil)
	plans, err := PlansList()
	c.Assert(err, check.IsNil)
	sort.Sort(planList(plans))
	c.Assert(plans, check.DeepEquals, expected)
}

func (s *S) TestPlanRemove(c *check.C) {
	plans := []appTypes.Plan{
		{Name: "plan1", Memory: 1, Swap: 2, CpuShare: 3},
		{Name: "plan2", Memory: 3, Swap: 4, CpuShare: 5},
	}
	err := PlanService().Insert(plans[0])
	c.Assert(err, check.IsNil)
	err = PlanService().Insert(plans[1])
	c.Assert(err, check.IsNil)
	err = PlanRemove(plans[0].Name)
	c.Assert(err, check.IsNil)
	dbPlans, err := PlanService().FindAll()
	c.Assert(err, check.IsNil)
	sort.Sort(planList(dbPlans))
	c.Assert(dbPlans, check.DeepEquals, []appTypes.Plan{
		s.defaultPlan,
		{Name: "plan2", Memory: 3, Swap: 4, CpuShare: 5},
	})
}

func (s *S) TestPlanRemoveInvalid(c *check.C) {
	err := PlanRemove("xxxx")
	c.Assert(err, check.Equals, appTypes.ErrPlanNotFound)
}

func (s *S) TestDefaultPlan(c *check.C) {
	p, err := DefaultPlan()
	c.Assert(err, check.IsNil)
	c.Assert(*p, check.DeepEquals, s.defaultPlan)
}

func (s *S) TestDefaultPlanWithoutDefault(c *check.C) {
	err := PlanService().Delete(s.defaultPlan)
	c.Assert(err, check.IsNil)
	config.Set("docker:memory", 12)
	config.Set("docker:swap", 32)
	defer config.Unset("docker:memory")
	defer config.Unset("docker:swap")
	p, err := DefaultPlan()
	c.Assert(err, check.IsNil)
	expected := appTypes.Plan{
		Name:     "autogenerated",
		Memory:   12 * 1024 * 1024,
		Swap:     20 * 1024 * 1024,
		CpuShare: 100,
	}
	c.Assert(*p, check.DeepEquals, expected)
}

func (s *S) TestFindPlanByName(c *check.C) {
	p := appTypes.Plan{
		Name:     "plan1",
		Memory:   9223372036854775807,
		Swap:     1024,
		CpuShare: 100,
	}
	err := SavePlan(p)
	c.Assert(err, check.IsNil)
	dbPlan, err := findPlanByName(p.Name)
	c.Assert(err, check.IsNil)
	c.Assert(*dbPlan, check.DeepEquals, p)
}
