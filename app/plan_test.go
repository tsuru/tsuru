// Copyright 2017 tsuru authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package app

import (
	"sort"

	"github.com/tsuru/config"
	_ "github.com/tsuru/tsuru/router/routertest"
	"gopkg.in/check.v1"
)

func (s *S) TestPlanAdd(c *check.C) {
	p := Plan{
		Name:     "plan1",
		Memory:   9223372036854775807,
		Swap:     1024,
		CpuShare: 100,
	}
	err := p.Save()
	c.Assert(err, check.IsNil)
	defer s.conn.Plans().RemoveId(p.Name)
	var plan Plan
	err = s.conn.Plans().FindId(p.Name).One(&plan)
	c.Assert(err, check.IsNil)
	c.Assert(plan, check.DeepEquals, p)
}

func (s *S) TestPlanAddWithInvalidRouter(c *check.C) {
	p := Plan{
		Name:     "plan1",
		Memory:   9223372036854775807,
		Swap:     1024,
		CpuShare: 100,
		Router:   "fake",
	}
	err := p.Save()
	c.Assert(err, check.IsNil)
	defer s.conn.Plans().RemoveId(p.Name)
	var plan Plan
	err = s.conn.Plans().FindId(p.Name).One(&plan)
	c.Assert(err, check.IsNil)
	c.Assert(plan, check.DeepEquals, p)
	r, err := plan.getRouter()
	c.Assert(err, check.IsNil)
	c.Assert(r, check.Equals, "fake")
}

func (s *S) TestPlanAddInvalid(c *check.C) {
	invalidPlans := []Plan{
		{
			Memory:   9223372036854775807,
			Swap:     1024,
			CpuShare: 100,
		},
		{
			Name:     "plan1",
			Memory:   9223372036854775807,
			Swap:     1024,
			CpuShare: 1,
		},
		{
			Name:     "plan1",
			Memory:   9223372036854775807,
			Swap:     1024,
			CpuShare: 100,
			Router:   "invalid",
		},
		{
			Name:     "plan1",
			Memory:   4,
			Swap:     1024,
			CpuShare: 100,
		},
	}
	expectedError := []error{PlanValidationError{"name"}, ErrLimitOfCpuShare, PlanValidationError{"router"}, ErrLimitOfMemory}
	for i, p := range invalidPlans {
		err := p.Save()
		c.Assert(err, check.FitsTypeOf, expectedError[i])
	}
}

func (s *S) TestPlanAddDupp(c *check.C) {
	p := Plan{
		Name:     "plan1",
		Memory:   9223372036854775807,
		Swap:     1024,
		CpuShare: 100,
	}
	defer s.conn.Plans().RemoveId(p.Name)
	err := p.Save()
	c.Assert(err, check.IsNil)
	err = p.Save()
	c.Assert(err, check.Equals, ErrPlanAlreadyExists)
}

func (s *S) TestPlanAddAsDefault(c *check.C) {
	s.conn.Plans().RemoveAll(nil)
	defer s.conn.Plans().Insert(s.defaultPlan)
	p := Plan{
		Name:     "plan1",
		Memory:   9223372036854775807,
		Swap:     1024,
		CpuShare: 100,
		Default:  true,
	}
	err := p.Save()
	c.Assert(err, check.IsNil)
	defer s.conn.Plans().RemoveId("plan1")
	p.Name = "plan2"
	err = p.Save()
	c.Assert(err, check.IsNil)
	defer s.conn.Plans().RemoveId("plan2")
	var plan1, plan2 Plan
	err = s.conn.Plans().FindId("plan1").One(&plan1)
	c.Assert(err, check.IsNil)
	c.Assert(plan1.Default, check.Equals, false)
	err = s.conn.Plans().FindId("plan2").One(&plan2)
	c.Assert(err, check.IsNil)
	c.Assert(plan2.Default, check.Equals, true)

}

type planList []Plan

func (l planList) Len() int           { return len(l) }
func (l planList) Swap(i, j int)      { l[i], l[j] = l[j], l[i] }
func (l planList) Less(i, j int) bool { return l[i].Name < l[j].Name }

func (s *S) TestPlansList(c *check.C) {
	expected := []Plan{
		s.defaultPlan,
		{Name: "plan1", Memory: 1, Swap: 2, CpuShare: 3},
		{Name: "plan2", Memory: 3, Swap: 4, CpuShare: 5},
	}
	err := s.conn.Plans().Insert(expected[1])
	c.Assert(err, check.IsNil)
	err = s.conn.Plans().Insert(expected[2])
	c.Assert(err, check.IsNil)
	defer s.conn.Plans().RemoveId(expected[1].Name)
	defer s.conn.Plans().RemoveId(expected[2].Name)
	plans, err := PlansList()
	c.Assert(err, check.IsNil)
	sort.Sort(planList(plans))
	c.Assert(plans, check.DeepEquals, expected)
}

func (s *S) TestPlanRemove(c *check.C) {
	plans := []Plan{
		{Name: "plan1", Memory: 1, Swap: 2, CpuShare: 3},
		{Name: "plan2", Memory: 3, Swap: 4, CpuShare: 5},
	}
	err := s.conn.Plans().Insert(plans[0])
	c.Assert(err, check.IsNil)
	err = s.conn.Plans().Insert(plans[1])
	c.Assert(err, check.IsNil)
	defer s.conn.Plans().RemoveId(plans[0].Name)
	defer s.conn.Plans().RemoveId(plans[1].Name)
	err = PlanRemove(plans[0].Name)
	c.Assert(err, check.IsNil)
	var dbPlans []Plan
	err = s.conn.Plans().Find(nil).All(&dbPlans)
	c.Assert(err, check.IsNil)
	sort.Sort(planList(dbPlans))
	c.Assert(dbPlans, check.DeepEquals, []Plan{
		s.defaultPlan,
		{Name: "plan2", Memory: 3, Swap: 4, CpuShare: 5},
	})
}

func (s *S) TestPlanRemoveInvalid(c *check.C) {
	err := PlanRemove("xxxx")
	c.Assert(err, check.Equals, ErrPlanNotFound)
}

func (s *S) TestDefaultPlan(c *check.C) {
	p, err := DefaultPlan()
	c.Assert(err, check.IsNil)
	c.Assert(*p, check.DeepEquals, s.defaultPlan)
}

func (s *S) TestDefaultPlanWithoutDefault(c *check.C) {
	s.conn.Plans().RemoveAll(nil)
	defer s.conn.Plans().Insert(s.defaultPlan)
	config.Set("docker:memory", 12)
	config.Set("docker:swap", 32)
	defer config.Unset("docker:memory")
	defer config.Unset("docker:swap")
	p, err := DefaultPlan()
	c.Assert(err, check.IsNil)
	expected := Plan{
		Name:     "autogenerated",
		Memory:   12 * 1024 * 1024,
		Swap:     20 * 1024 * 1024,
		CpuShare: 100,
	}
	c.Assert(*p, check.DeepEquals, expected)
}

func (s *S) TestFindPlanByName(c *check.C) {
	p := Plan{
		Name:     "plan1",
		Memory:   9223372036854775807,
		Swap:     1024,
		CpuShare: 100,
	}
	err := p.Save()
	c.Assert(err, check.IsNil)
	defer s.conn.Plans().RemoveId(p.Name)
	dbPlan, err := findPlanByName(p.Name)
	c.Assert(err, check.IsNil)
	c.Assert(*dbPlan, check.DeepEquals, p)
}

func (s *S) TestPlanGetRouter(c *check.C) {
	config.Set("docker:router", "defaultrouter")
	defer config.Unset("docker:router")
	p := Plan{
		Name:   "plan1",
		Router: "myrouter",
	}
	r, err := p.getRouter()
	c.Assert(err, check.IsNil)
	c.Assert(r, check.Equals, "myrouter")
	p2 := Plan{
		Name: "plan2",
	}
	r2, err := p2.getRouter()
	c.Assert(err, check.IsNil)
	c.Assert(r2, check.Equals, "defaultrouter")
}
