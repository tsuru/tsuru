/*
Copyright The CBI Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/containerbuilding/cbi/pkg/apis/cbi/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BuildJobLister helps list BuildJobs.
type BuildJobLister interface {
	// List lists all BuildJobs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BuildJob, err error)
	// BuildJobs returns an object that can list and get BuildJobs.
	BuildJobs(namespace string) BuildJobNamespaceLister
	BuildJobListerExpansion
}

// buildJobLister implements the BuildJobLister interface.
type buildJobLister struct {
	indexer cache.Indexer
}

// NewBuildJobLister returns a new BuildJobLister.
func NewBuildJobLister(indexer cache.Indexer) BuildJobLister {
	return &buildJobLister{indexer: indexer}
}

// List lists all BuildJobs in the indexer.
func (s *buildJobLister) List(selector labels.Selector) (ret []*v1alpha1.BuildJob, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BuildJob))
	})
	return ret, err
}

// BuildJobs returns an object that can list and get BuildJobs.
func (s *buildJobLister) BuildJobs(namespace string) BuildJobNamespaceLister {
	return buildJobNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BuildJobNamespaceLister helps list and get BuildJobs.
type BuildJobNamespaceLister interface {
	// List lists all BuildJobs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BuildJob, err error)
	// Get retrieves the BuildJob from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BuildJob, error)
	BuildJobNamespaceListerExpansion
}

// buildJobNamespaceLister implements the BuildJobNamespaceLister
// interface.
type buildJobNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BuildJobs in the indexer for a given namespace.
func (s buildJobNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BuildJob, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BuildJob))
	})
	return ret, err
}

// Get retrieves the BuildJob from the indexer for a given namespace and name.
func (s buildJobNamespaceLister) Get(name string) (*v1alpha1.BuildJob, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("buildjob"), name)
	}
	return obj.(*v1alpha1.BuildJob), nil
}
