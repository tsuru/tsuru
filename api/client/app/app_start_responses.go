// Code generated by go-swagger; DO NOT EDIT.

package app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// AppStartReader is a Reader for the AppStart structure.
type AppStartReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AppStartReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAppStartOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewAppStartUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAppStartNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAppStartOK creates a AppStartOK with default headers values
func NewAppStartOK() *AppStartOK {
	return &AppStartOK{}
}

/*AppStartOK handles this case with default header values.

Ok
*/
type AppStartOK struct {
	Payload string
}

func (o *AppStartOK) Error() string {
	return fmt.Sprintf("[POST /apps/{app}/start][%d] appStartOK  %+v", 200, o.Payload)
}

func (o *AppStartOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppStartUnauthorized creates a AppStartUnauthorized with default headers values
func NewAppStartUnauthorized() *AppStartUnauthorized {
	return &AppStartUnauthorized{}
}

/*AppStartUnauthorized handles this case with default header values.

Unauthorized
*/
type AppStartUnauthorized struct {
}

func (o *AppStartUnauthorized) Error() string {
	return fmt.Sprintf("[POST /apps/{app}/start][%d] appStartUnauthorized ", 401)
}

func (o *AppStartUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAppStartNotFound creates a AppStartNotFound with default headers values
func NewAppStartNotFound() *AppStartNotFound {
	return &AppStartNotFound{}
}

/*AppStartNotFound handles this case with default header values.

App not found
*/
type AppStartNotFound struct {
}

func (o *AppStartNotFound) Error() string {
	return fmt.Sprintf("[POST /apps/{app}/start][%d] appStartNotFound ", 404)
}

func (o *AppStartNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
