// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeletePoolsPoolParams creates a new DeletePoolsPoolParams object
// with the default values initialized.
func NewDeletePoolsPoolParams() *DeletePoolsPoolParams {
	var ()
	return &DeletePoolsPoolParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeletePoolsPoolParamsWithTimeout creates a new DeletePoolsPoolParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeletePoolsPoolParamsWithTimeout(timeout time.Duration) *DeletePoolsPoolParams {
	var ()
	return &DeletePoolsPoolParams{

		timeout: timeout,
	}
}

// NewDeletePoolsPoolParamsWithContext creates a new DeletePoolsPoolParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeletePoolsPoolParamsWithContext(ctx context.Context) *DeletePoolsPoolParams {
	var ()
	return &DeletePoolsPoolParams{

		Context: ctx,
	}
}

// NewDeletePoolsPoolParamsWithHTTPClient creates a new DeletePoolsPoolParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeletePoolsPoolParamsWithHTTPClient(client *http.Client) *DeletePoolsPoolParams {
	var ()
	return &DeletePoolsPoolParams{
		HTTPClient: client,
	}
}

/*DeletePoolsPoolParams contains all the parameters to send to the API endpoint
for the delete pools pool operation typically these are written to a http.Request
*/
type DeletePoolsPoolParams struct {

	/*Pool
	  Pool name.

	*/
	Pool string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete pools pool params
func (o *DeletePoolsPoolParams) WithTimeout(timeout time.Duration) *DeletePoolsPoolParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete pools pool params
func (o *DeletePoolsPoolParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete pools pool params
func (o *DeletePoolsPoolParams) WithContext(ctx context.Context) *DeletePoolsPoolParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete pools pool params
func (o *DeletePoolsPoolParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete pools pool params
func (o *DeletePoolsPoolParams) WithHTTPClient(client *http.Client) *DeletePoolsPoolParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete pools pool params
func (o *DeletePoolsPoolParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPool adds the pool to the delete pools pool params
func (o *DeletePoolsPoolParams) WithPool(pool string) *DeletePoolsPoolParams {
	o.SetPool(pool)
	return o
}

// SetPool adds the pool to the delete pools pool params
func (o *DeletePoolsPoolParams) SetPool(pool string) {
	o.Pool = pool
}

// WriteToRequest writes these params to a swagger request
func (o *DeletePoolsPoolParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param pool
	if err := r.SetPathParam("pool", o.Pool); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
