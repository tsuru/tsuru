// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAppAppRoutersRouter delete app router
*/
func (a *Client) DeleteAppAppRoutersRouter(params *DeleteAppAppRoutersRouterParams) (*DeleteAppAppRoutersRouterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppAppRoutersRouterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAppAppRoutersRouter",
		Method:             "DELETE",
		PathPattern:        "/app/{app}/routers/{router}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAppAppRoutersRouterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAppAppRoutersRouterOK), nil

}

/*
DeleteAppsAppCertificate unset app certificate
*/
func (a *Client) DeleteAppsAppCertificate(params *DeleteAppsAppCertificateParams) (*DeleteAppsAppCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppsAppCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAppsAppCertificate",
		Method:             "DELETE",
		PathPattern:        "/apps/{app}/certificate",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAppsAppCertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAppsAppCertificateOK), nil

}

/*
DeleteAppsAppLock app unlock
*/
func (a *Client) DeleteAppsAppLock(params *DeleteAppsAppLockParams) (*DeleteAppsAppLockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppsAppLockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAppsAppLock",
		Method:             "DELETE",
		PathPattern:        "/apps/{app}/lock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAppsAppLockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAppsAppLockOK), nil

}

/*
DeleteAppsAppUnits remove units
*/
func (a *Client) DeleteAppsAppUnits(params *DeleteAppsAppUnitsParams) (*DeleteAppsAppUnitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppsAppUnitsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAppsAppUnits",
		Method:             "DELETE",
		PathPattern:        "/apps/{app}/units",
		ProducesMediaTypes: []string{"application/x-json-stream"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAppsAppUnitsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAppsAppUnitsOK), nil

}

/*
DeleteAutoscaleRulesRule delete autoscale rule
*/
func (a *Client) DeleteAutoscaleRulesRule(params *DeleteAutoscaleRulesRuleParams) (*DeleteAutoscaleRulesRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAutoscaleRulesRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAutoscaleRulesRule",
		Method:             "DELETE",
		PathPattern:        "/autoscale/rules/{rule}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAutoscaleRulesRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAutoscaleRulesRuleOK), nil

}

/*
DeleteDockerNodecontainersNodecontainer remove node container
*/
func (a *Client) DeleteDockerNodecontainersNodecontainer(params *DeleteDockerNodecontainersNodecontainerParams) (*DeleteDockerNodecontainersNodecontainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDockerNodecontainersNodecontainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDockerNodecontainersNodecontainer",
		Method:             "DELETE",
		PathPattern:        "/docker/nodecontainers/{nodecontainer}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDockerNodecontainersNodecontainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDockerNodecontainersNodecontainerOK), nil

}

/*
DeleteEventsBlocksBlock remove event block
*/
func (a *Client) DeleteEventsBlocksBlock(params *DeleteEventsBlocksBlockParams) (*DeleteEventsBlocksBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEventsBlocksBlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteEventsBlocksBlock",
		Method:             "DELETE",
		PathPattern:        "/events/blocks/{block}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEventsBlocksBlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteEventsBlocksBlockOK), nil

}

/*
DeleteHealingNode remove node healing
*/
func (a *Client) DeleteHealingNode(params *DeleteHealingNodeParams) (*DeleteHealingNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHealingNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteHealingNode",
		Method:             "DELETE",
		PathPattern:        "/healing/node",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteHealingNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteHealingNodeOK), nil

}

/*
DeleteIaasMachinesMachine machine destroy
*/
func (a *Client) DeleteIaasMachinesMachine(params *DeleteIaasMachinesMachineParams) (*DeleteIaasMachinesMachineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIaasMachinesMachineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIaasMachinesMachine",
		Method:             "DELETE",
		PathPattern:        "/iaas/machines/{machine}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteIaasMachinesMachineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIaasMachinesMachineOK), nil

}

/*
DeleteNodeAddress remove node
*/
func (a *Client) DeleteNodeAddress(params *DeleteNodeAddressParams) (*DeleteNodeAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNodeAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteNodeAddress",
		Method:             "DELETE",
		PathPattern:        "/node/{address}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNodeAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNodeAddressOK), nil

}

/*
DeletePlansPlan remove plan
*/
func (a *Client) DeletePlansPlan(params *DeletePlansPlanParams) (*DeletePlansPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePlansPlanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePlansPlan",
		Method:             "DELETE",
		PathPattern:        "/plans/{plan}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePlansPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePlansPlanOK), nil

}

/*
DeletePlatformsPlatform remove platform
*/
func (a *Client) DeletePlatformsPlatform(params *DeletePlatformsPlatformParams) (*DeletePlatformsPlatformOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePlatformsPlatformParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePlatformsPlatform",
		Method:             "DELETE",
		PathPattern:        "/platforms/{platform}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePlatformsPlatformReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePlatformsPlatformOK), nil

}

/*
DeletePoolsPool remove pool
*/
func (a *Client) DeletePoolsPool(params *DeletePoolsPoolParams) (*DeletePoolsPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePoolsPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePoolsPool",
		Method:             "DELETE",
		PathPattern:        "/pools/{pool}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePoolsPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePoolsPoolOK), nil

}

/*
DeleteRolesRolePermissionsPermission remove permission
*/
func (a *Client) DeleteRolesRolePermissionsPermission(params *DeleteRolesRolePermissionsPermissionParams) (*DeleteRolesRolePermissionsPermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRolesRolePermissionsPermissionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRolesRolePermissionsPermission",
		Method:             "DELETE",
		PathPattern:        "/roles/{role}/permissions/{permission}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRolesRolePermissionsPermissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRolesRolePermissionsPermissionOK), nil

}

/*
DeleteRolesRoleUserEmail dissociate role from user
*/
func (a *Client) DeleteRolesRoleUserEmail(params *DeleteRolesRoleUserEmailParams) (*DeleteRolesRoleUserEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRolesRoleUserEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRolesRoleUserEmail",
		Method:             "DELETE",
		PathPattern:        "/roles/{role}/user/{email}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRolesRoleUserEmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRolesRoleUserEmailOK), nil

}

/*
DeleteServicesServiceInstancesInstance remove service instance
*/
func (a *Client) DeleteServicesServiceInstancesInstance(params *DeleteServicesServiceInstancesInstanceParams) (*DeleteServicesServiceInstancesInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServicesServiceInstancesInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteServicesServiceInstancesInstance",
		Method:             "DELETE",
		PathPattern:        "/services/{service}/instances/{instance}",
		ProducesMediaTypes: []string{"application/x-json-stream"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteServicesServiceInstancesInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteServicesServiceInstancesInstanceOK), nil

}

/*
DeleteServicesServiceInstancesPermissionInstanceTeam revoke access to service instance
*/
func (a *Client) DeleteServicesServiceInstancesPermissionInstanceTeam(params *DeleteServicesServiceInstancesPermissionInstanceTeamParams) (*DeleteServicesServiceInstancesPermissionInstanceTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServicesServiceInstancesPermissionInstanceTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteServicesServiceInstancesPermissionInstanceTeam",
		Method:             "DELETE",
		PathPattern:        "/services/{service}/instances/permission/{instance}/{team}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteServicesServiceInstancesPermissionInstanceTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteServicesServiceInstancesPermissionInstanceTeamOK), nil

}

/*
DeleteServicesServiceTeamTeam revoke access to a service
*/
func (a *Client) DeleteServicesServiceTeamTeam(params *DeleteServicesServiceTeamTeamParams) (*DeleteServicesServiceTeamTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServicesServiceTeamTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteServicesServiceTeamTeam",
		Method:             "DELETE",
		PathPattern:        "/services/{service}/team/{team}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteServicesServiceTeamTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteServicesServiceTeamTeamOK), nil

}

/*
DeleteUsersKeysKey remove key
*/
func (a *Client) DeleteUsersKeysKey(params *DeleteUsersKeysKeyParams) (*DeleteUsersKeysKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsersKeysKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteUsersKeysKey",
		Method:             "DELETE",
		PathPattern:        "/users/keys/{key}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUsersKeysKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUsersKeysKeyOK), nil

}

/*
DeleteUsersTokens logout
*/
func (a *Client) DeleteUsersTokens(params *DeleteUsersTokensParams) (*DeleteUsersTokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsersTokensParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteUsersTokens",
		Method:             "DELETE",
		PathPattern:        "/users/tokens",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUsersTokensReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUsersTokensOK), nil

}

/*
DeleteVolumesVolume volume delete
*/
func (a *Client) DeleteVolumesVolume(params *DeleteVolumesVolumeParams) (*DeleteVolumesVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVolumesVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVolumesVolume",
		Method:             "DELETE",
		PathPattern:        "/volumes/{volume}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVolumesVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVolumesVolumeOK), nil

}

/*
DeleteVolumesVolumeBind volume unbind
*/
func (a *Client) DeleteVolumesVolumeBind(params *DeleteVolumesVolumeBindParams) (*DeleteVolumesVolumeBindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVolumesVolumeBindParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVolumesVolumeBind",
		Method:             "DELETE",
		PathPattern:        "/volumes/{volume}/bind",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVolumesVolumeBindReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVolumesVolumeBindOK), nil

}

/*
Get index
*/
func (a *Client) Get(params *GetParams) (*GetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get",
		Method:             "GET",
		PathPattern:        "/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOK), nil

}

/*
GetAppAppRouters list app routers
*/
func (a *Client) GetAppAppRouters(params *GetAppAppRoutersParams) (*GetAppAppRoutersOK, *GetAppAppRoutersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppAppRoutersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAppAppRouters",
		Method:             "GET",
		PathPattern:        "/app/{app}/routers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAppAppRoutersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetAppAppRoutersOK:
		return value, nil, nil
	case *GetAppAppRoutersNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetAppsAppMetricEnvs metric envs
*/
func (a *Client) GetAppsAppMetricEnvs(params *GetAppsAppMetricEnvsParams) (*GetAppsAppMetricEnvsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppsAppMetricEnvsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAppsAppMetricEnvs",
		Method:             "GET",
		PathPattern:        "/apps/{app}/metric/envs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAppsAppMetricEnvsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAppsAppMetricEnvsOK), nil

}

/*
GetAppsAppShell app shell
*/
func (a *Client) GetAppsAppShell(params *GetAppsAppShellParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppsAppShellParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAppsAppShell",
		Method:             "GET",
		PathPattern:        "/apps/{app}/shell",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAppsAppShellReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetAuthScheme get auth scheme
*/
func (a *Client) GetAuthScheme(params *GetAuthSchemeParams) (*GetAuthSchemeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthSchemeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAuthScheme",
		Method:             "GET",
		PathPattern:        "/auth/scheme",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAuthSchemeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthSchemeOK), nil

}

/*
GetAutoscale list autoscale history
*/
func (a *Client) GetAutoscale(params *GetAutoscaleParams) (*GetAutoscaleOK, *GetAutoscaleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAutoscaleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAutoscale",
		Method:             "GET",
		PathPattern:        "/autoscale",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAutoscaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetAutoscaleOK:
		return value, nil, nil
	case *GetAutoscaleNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetAutoscaleConfig get autoscale config
*/
func (a *Client) GetAutoscaleConfig(params *GetAutoscaleConfigParams) (*GetAutoscaleConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAutoscaleConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAutoscaleConfig",
		Method:             "GET",
		PathPattern:        "/autoscale/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAutoscaleConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAutoscaleConfigOK), nil

}

/*
GetDebugGoroutines dump goroutines
*/
func (a *Client) GetDebugGoroutines(params *GetDebugGoroutinesParams) (*GetDebugGoroutinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugGoroutinesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDebugGoroutines",
		Method:             "GET",
		PathPattern:        "/debug/goroutines",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDebugGoroutinesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDebugGoroutinesOK), nil

}

/*
GetDebugPprof profile index handler
*/
func (a *Client) GetDebugPprof(params *GetDebugPprofParams) (*GetDebugPprofOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugPprofParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDebugPprof",
		Method:             "GET",
		PathPattern:        "/debug/pprof",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDebugPprofReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDebugPprofOK), nil

}

/*
GetDebugPprofCmdline profile cmdline handler
*/
func (a *Client) GetDebugPprofCmdline(params *GetDebugPprofCmdlineParams) (*GetDebugPprofCmdlineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugPprofCmdlineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDebugPprofCmdline",
		Method:             "GET",
		PathPattern:        "/debug/pprof/cmdline",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDebugPprofCmdlineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDebugPprofCmdlineOK), nil

}

/*
GetDebugPprofProfile profile handler
*/
func (a *Client) GetDebugPprofProfile(params *GetDebugPprofProfileParams) (*GetDebugPprofProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugPprofProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDebugPprofProfile",
		Method:             "GET",
		PathPattern:        "/debug/pprof/profile",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDebugPprofProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDebugPprofProfileOK), nil

}

/*
GetDebugPprofSymbol profile symbol handler
*/
func (a *Client) GetDebugPprofSymbol(params *GetDebugPprofSymbolParams) (*GetDebugPprofSymbolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugPprofSymbolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDebugPprofSymbol",
		Method:             "GET",
		PathPattern:        "/debug/pprof/symbol",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDebugPprofSymbolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDebugPprofSymbolOK), nil

}

/*
GetDebugPprofTrace profile trace handler
*/
func (a *Client) GetDebugPprofTrace(params *GetDebugPprofTraceParams) (*GetDebugPprofTraceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugPprofTraceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDebugPprofTrace",
		Method:             "GET",
		PathPattern:        "/debug/pprof/trace",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDebugPprofTraceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDebugPprofTraceOK), nil

}

/*
GetDeploys deploy list
*/
func (a *Client) GetDeploys(params *GetDeploysParams) (*GetDeploysOK, *GetDeploysNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDeploys",
		Method:             "GET",
		PathPattern:        "/deploys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetDeploysOK:
		return value, nil, nil
	case *GetDeploysNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetDeploysDeploy deploy info
*/
func (a *Client) GetDeploysDeploy(params *GetDeploysDeployParams) (*GetDeploysDeployOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploysDeployParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDeploysDeploy",
		Method:             "GET",
		PathPattern:        "/deploys/{deploy}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploysDeployReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeploysDeployOK), nil

}

/*
GetDockerHealing docker healing history
*/
func (a *Client) GetDockerHealing(params *GetDockerHealingParams) (*GetDockerHealingOK, *GetDockerHealingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDockerHealingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDockerHealing",
		Method:             "GET",
		PathPattern:        "/docker/healing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDockerHealingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetDockerHealingOK:
		return value, nil, nil
	case *GetDockerHealingNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetDockerNodeAppsAppContainers list units by app
*/
func (a *Client) GetDockerNodeAppsAppContainers(params *GetDockerNodeAppsAppContainersParams) (*GetDockerNodeAppsAppContainersOK, *GetDockerNodeAppsAppContainersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDockerNodeAppsAppContainersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDockerNodeAppsAppContainers",
		Method:             "GET",
		PathPattern:        "/docker/node/apps/{app}/containers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDockerNodeAppsAppContainersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetDockerNodeAppsAppContainersOK:
		return value, nil, nil
	case *GetDockerNodeAppsAppContainersNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetEvents event list
*/
func (a *Client) GetEvents(params *GetEventsParams) (*GetEventsOK, *GetEventsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEvents",
		Method:             "GET",
		PathPattern:        "/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetEventsOK:
		return value, nil, nil
	case *GetEventsNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetEventsEvent event info
*/
func (a *Client) GetEventsEvent(params *GetEventsEventParams) (*GetEventsEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventsEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEventsEvent",
		Method:             "GET",
		PathPattern:        "/events/{event}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventsEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventsEventOK), nil

}

/*
GetEventsKinds kind list
*/
func (a *Client) GetEventsKinds(params *GetEventsKindsParams) (*GetEventsKindsOK, *GetEventsKindsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventsKindsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEventsKinds",
		Method:             "GET",
		PathPattern:        "/events/kinds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventsKindsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetEventsKindsOK:
		return value, nil, nil
	case *GetEventsKindsNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetHealthcheck healthcheck
*/
func (a *Client) GetHealthcheck(params *GetHealthcheckParams) (*GetHealthcheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHealthcheckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHealthcheck",
		Method:             "GET",
		PathPattern:        "/healthcheck",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHealthcheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHealthcheckOK), nil

}

/*
GetIaasMachines machine list
*/
func (a *Client) GetIaasMachines(params *GetIaasMachinesParams) (*GetIaasMachinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIaasMachinesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIaasMachines",
		Method:             "GET",
		PathPattern:        "/iaas/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIaasMachinesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIaasMachinesOK), nil

}

/*
GetInfo api info
*/
func (a *Client) GetInfo(params *GetInfoParams) (*GetInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInfo",
		Method:             "GET",
		PathPattern:        "/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInfoOK), nil

}

/*
GetInstallHosts list install hosts
*/
func (a *Client) GetInstallHosts(params *GetInstallHostsParams) (*GetInstallHostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstallHostsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInstallHosts",
		Method:             "GET",
		PathPattern:        "/install/hosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstallHostsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstallHostsOK), nil

}

/*
GetInstallHostsHost install host info
*/
func (a *Client) GetInstallHostsHost(params *GetInstallHostsHostParams) (*GetInstallHostsHostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstallHostsHostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInstallHostsHost",
		Method:             "GET",
		PathPattern:        "/install/hosts/{host}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstallHostsHostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstallHostsHostOK), nil

}

/*
GetNodeAddress node info
*/
func (a *Client) GetNodeAddress(params *GetNodeAddressParams) (*GetNodeAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNodeAddress",
		Method:             "GET",
		PathPattern:        "/node/{address}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNodeAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodeAddressOK), nil

}

/*
GetNodeAddressContainers list units by node
*/
func (a *Client) GetNodeAddressContainers(params *GetNodeAddressContainersParams) (*GetNodeAddressContainersOK, *GetNodeAddressContainersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeAddressContainersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNodeAddressContainers",
		Method:             "GET",
		PathPattern:        "/node/{address}/containers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNodeAddressContainersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetNodeAddressContainersOK:
		return value, nil, nil
	case *GetNodeAddressContainersNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetPermissions list permissions
*/
func (a *Client) GetPermissions(params *GetPermissionsParams) (*GetPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPermissions",
		Method:             "GET",
		PathPattern:        "/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPermissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPermissionsOK), nil

}

/*
GetProvisionerClusters list provisioner clusters
*/
func (a *Client) GetProvisionerClusters(params *GetProvisionerClustersParams) (*GetProvisionerClustersOK, *GetProvisionerClustersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvisionerClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetProvisionerClusters",
		Method:             "GET",
		PathPattern:        "/provisioner/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProvisionerClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetProvisionerClustersOK:
		return value, nil, nil
	case *GetProvisionerClustersNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetProvisionerClustersCluster delete provisioner cluster
*/
func (a *Client) GetProvisionerClustersCluster(params *GetProvisionerClustersClusterParams) (*GetProvisionerClustersClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvisionerClustersClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetProvisionerClustersCluster",
		Method:             "GET",
		PathPattern:        "/provisioner/clusters/{cluster}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProvisionerClustersClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProvisionerClustersClusterOK), nil

}

/*
GetRolesRole role info
*/
func (a *Client) GetRolesRole(params *GetRolesRoleParams) (*GetRolesRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRolesRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRolesRole",
		Method:             "GET",
		PathPattern:        "/roles/{role}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRolesRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRolesRoleOK), nil

}

/*
GetRouters router list
*/
func (a *Client) GetRouters(params *GetRoutersParams) (*GetRoutersOK, *GetRoutersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoutersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRouters",
		Method:             "GET",
		PathPattern:        "/routers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRoutersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetRoutersOK:
		return value, nil, nil
	case *GetRoutersNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetServices service list
*/
func (a *Client) GetServices(params *GetServicesParams) (*GetServicesOK, *GetServicesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServices",
		Method:             "GET",
		PathPattern:        "/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetServicesOK:
		return value, nil, nil
	case *GetServicesNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetServicesInstances service instance list
*/
func (a *Client) GetServicesInstances(params *GetServicesInstancesParams) (*GetServicesInstancesOK, *GetServicesInstancesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServicesInstances",
		Method:             "GET",
		PathPattern:        "/services/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicesInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetServicesInstancesOK:
		return value, nil, nil
	case *GetServicesInstancesNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetServicesProxyServiceService service proxy
*/
func (a *Client) GetServicesProxyServiceService(params *GetServicesProxyServiceServiceParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesProxyServiceServiceParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServicesProxyServiceService",
		Method:             "GET",
		PathPattern:        "/services/proxy/service/{service}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicesProxyServiceServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetServicesService service info
*/
func (a *Client) GetServicesService(params *GetServicesServiceParams) (*GetServicesServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServicesService",
		Method:             "GET",
		PathPattern:        "/services/{service}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicesServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServicesServiceOK), nil

}

/*
GetServicesServiceDoc service doc
*/
func (a *Client) GetServicesServiceDoc(params *GetServicesServiceDocParams) (*GetServicesServiceDocOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesServiceDocParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServicesServiceDoc",
		Method:             "GET",
		PathPattern:        "/services/{service}/doc",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicesServiceDocReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServicesServiceDocOK), nil

}

/*
GetServicesServiceInstancesInstanceStatus service instance status
*/
func (a *Client) GetServicesServiceInstancesInstanceStatus(params *GetServicesServiceInstancesInstanceStatusParams) (*GetServicesServiceInstancesInstanceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesServiceInstancesInstanceStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServicesServiceInstancesInstanceStatus",
		Method:             "GET",
		PathPattern:        "/services/{service}/instances/{instance}/status",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicesServiceInstancesInstanceStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServicesServiceInstancesInstanceStatusOK), nil

}

/*
GetServicesServicePlans service plans
*/
func (a *Client) GetServicesServicePlans(params *GetServicesServicePlansParams) (*GetServicesServicePlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesServicePlansParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServicesServicePlans",
		Method:             "GET",
		PathPattern:        "/services/{service}/plans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicesServicePlansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServicesServicePlansOK), nil

}

/*
GetServicesServiceProxyInstance service instance proxy
*/
func (a *Client) GetServicesServiceProxyInstance(params *GetServicesServiceProxyInstanceParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesServiceProxyInstanceParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetServicesServiceProxyInstance",
		Method:             "GET",
		PathPattern:        "/services/{service}/proxy/{instance}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicesServiceProxyInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetUsers user list
*/
func (a *Client) GetUsers(params *GetUsersParams) (*GetUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsers",
		Method:             "GET",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersOK), nil

}

/*
GetUsersAPIKey show token
*/
func (a *Client) GetUsersAPIKey(params *GetUsersAPIKeyParams) (*GetUsersAPIKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersAPIKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersAPIKey",
		Method:             "GET",
		PathPattern:        "/users/api-key",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersAPIKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersAPIKeyOK), nil

}

/*
GetUsersEmailQuota user quota
*/
func (a *Client) GetUsersEmailQuota(params *GetUsersEmailQuotaParams) (*GetUsersEmailQuotaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersEmailQuotaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersEmailQuota",
		Method:             "GET",
		PathPattern:        "/users/{email}/quota",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersEmailQuotaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersEmailQuotaOK), nil

}

/*
GetUsersInfo user info
*/
func (a *Client) GetUsersInfo(params *GetUsersInfoParams) (*GetUsersInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersInfo",
		Method:             "GET",
		PathPattern:        "/users/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersInfoOK), nil

}

/*
GetVolumeplans volume plan list
*/
func (a *Client) GetVolumeplans(params *GetVolumeplansParams) (*GetVolumeplansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVolumeplansParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVolumeplans",
		Method:             "GET",
		PathPattern:        "/volumeplans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVolumeplansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVolumeplansOK), nil

}

/*
GetVolumes volume list
*/
func (a *Client) GetVolumes(params *GetVolumesParams) (*GetVolumesOK, *GetVolumesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVolumesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVolumes",
		Method:             "GET",
		PathPattern:        "/volumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVolumesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetVolumesOK:
		return value, nil, nil
	case *GetVolumesNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostAppsAppBuild app build
*/
func (a *Client) PostAppsAppBuild(params *PostAppsAppBuildParams) (*PostAppsAppBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppsAppBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppsAppBuild",
		Method:             "POST",
		PathPattern:        "/apps/{app}/build",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAppsAppBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAppsAppBuildOK), nil

}

/*
PostAppsAppCname set cname
*/
func (a *Client) PostAppsAppCname(params *PostAppsAppCnameParams) (*PostAppsAppCnameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppsAppCnameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppsAppCname",
		Method:             "POST",
		PathPattern:        "/apps/{app}/cname",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAppsAppCnameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAppsAppCnameOK), nil

}

/*
PostAppsAppDeploy app deploy
*/
func (a *Client) PostAppsAppDeploy(params *PostAppsAppDeployParams) (*PostAppsAppDeployOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppsAppDeployParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppsAppDeploy",
		Method:             "POST",
		PathPattern:        "/apps/{app}/deploy",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAppsAppDeployReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAppsAppDeployOK), nil

}

/*
PostAppsAppDeployRebuild rebuild
*/
func (a *Client) PostAppsAppDeployRebuild(params *PostAppsAppDeployRebuildParams) (*PostAppsAppDeployRebuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppsAppDeployRebuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppsAppDeployRebuild",
		Method:             "POST",
		PathPattern:        "/apps/{app}/deploy/rebuild",
		ProducesMediaTypes: []string{"application/x-json-stream"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAppsAppDeployRebuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAppsAppDeployRebuildOK), nil

}

/*
PostAppsAppDeployRollback rollback
*/
func (a *Client) PostAppsAppDeployRollback(params *PostAppsAppDeployRollbackParams) (*PostAppsAppDeployRollbackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppsAppDeployRollbackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppsAppDeployRollback",
		Method:             "POST",
		PathPattern:        "/apps/{app}/deploy/rollback",
		ProducesMediaTypes: []string{"application/x-json-stream"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAppsAppDeployRollbackReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAppsAppDeployRollbackOK), nil

}

/*
PostAppsAppDiff deploy diff
*/
func (a *Client) PostAppsAppDiff(params *PostAppsAppDiffParams) (*PostAppsAppDiffOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppsAppDiffParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppsAppDiff",
		Method:             "POST",
		PathPattern:        "/apps/{app}/diff",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAppsAppDiffReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAppsAppDiffOK), nil

}

/*
PostAppsAppEnv set envs
*/
func (a *Client) PostAppsAppEnv(params *PostAppsAppEnvParams) (*PostAppsAppEnvOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppsAppEnvParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppsAppEnv",
		Method:             "POST",
		PathPattern:        "/apps/{app}/env",
		ProducesMediaTypes: []string{"application/x-json-stream"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAppsAppEnvReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAppsAppEnvOK), nil

}

/*
PostAppsAppLog app log
*/
func (a *Client) PostAppsAppLog(params *PostAppsAppLogParams) (*PostAppsAppLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppsAppLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppsAppLog",
		Method:             "POST",
		PathPattern:        "/apps/{app}/log",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAppsAppLogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAppsAppLogOK), nil

}

/*
PostAppsAppRestart app restart
*/
func (a *Client) PostAppsAppRestart(params *PostAppsAppRestartParams) (*PostAppsAppRestartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppsAppRestartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppsAppRestart",
		Method:             "POST",
		PathPattern:        "/apps/{app}/restart",
		ProducesMediaTypes: []string{"application/x-json-stream"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAppsAppRestartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAppsAppRestartOK), nil

}

/*
PostAppsAppRoutes rebuild routes
*/
func (a *Client) PostAppsAppRoutes(params *PostAppsAppRoutesParams) (*PostAppsAppRoutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppsAppRoutesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppsAppRoutes",
		Method:             "POST",
		PathPattern:        "/apps/{app}/routes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAppsAppRoutesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAppsAppRoutesOK), nil

}

/*
PostAppsAppRun run commands
*/
func (a *Client) PostAppsAppRun(params *PostAppsAppRunParams) (*PostAppsAppRunOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppsAppRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppsAppRun",
		Method:             "POST",
		PathPattern:        "/apps/{app}/run",
		ProducesMediaTypes: []string{"application/x-json-stream"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAppsAppRunReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAppsAppRunOK), nil

}

/*
PostAppsAppSleep app sleep
*/
func (a *Client) PostAppsAppSleep(params *PostAppsAppSleepParams) (*PostAppsAppSleepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppsAppSleepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppsAppSleep",
		Method:             "POST",
		PathPattern:        "/apps/{app}/sleep",
		ProducesMediaTypes: []string{"application/x-json-stream"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAppsAppSleepReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAppsAppSleepOK), nil

}

/*
PostAppsAppStart app start
*/
func (a *Client) PostAppsAppStart(params *PostAppsAppStartParams) (*PostAppsAppStartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppsAppStartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppsAppStart",
		Method:             "POST",
		PathPattern:        "/apps/{app}/start",
		ProducesMediaTypes: []string{"application/x-json-stream"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAppsAppStartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAppsAppStartOK), nil

}

/*
PostAppsAppStop app stop
*/
func (a *Client) PostAppsAppStop(params *PostAppsAppStopParams) (*PostAppsAppStopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppsAppStopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppsAppStop",
		Method:             "POST",
		PathPattern:        "/apps/{app}/stop",
		ProducesMediaTypes: []string{"application/x-json-stream"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAppsAppStopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAppsAppStopOK), nil

}

/*
PostAppsAppUnitsRegister register unit
*/
func (a *Client) PostAppsAppUnitsRegister(params *PostAppsAppUnitsRegisterParams) (*PostAppsAppUnitsRegisterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppsAppUnitsRegisterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppsAppUnitsRegister",
		Method:             "POST",
		PathPattern:        "/apps/{app}/units/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAppsAppUnitsRegisterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAppsAppUnitsRegisterOK), nil

}

/*
PostAppsAppUnitsUnit set unit status
*/
func (a *Client) PostAppsAppUnitsUnit(params *PostAppsAppUnitsUnitParams) (*PostAppsAppUnitsUnitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppsAppUnitsUnitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppsAppUnitsUnit",
		Method:             "POST",
		PathPattern:        "/apps/{app}/units/{unit}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAppsAppUnitsUnitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAppsAppUnitsUnitOK), nil

}

/*
PostAuthLogin login
*/
func (a *Client) PostAuthLogin(params *PostAuthLoginParams) (*PostAuthLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAuthLoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAuthLogin",
		Method:             "POST",
		PathPattern:        "/auth/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAuthLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAuthLoginOK), nil

}

/*
PostAuthSaml saml callback
*/
func (a *Client) PostAuthSaml(params *PostAuthSamlParams) (*PostAuthSamlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAuthSamlParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAuthSaml",
		Method:             "POST",
		PathPattern:        "/auth/saml",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAuthSamlReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAuthSamlOK), nil

}

/*
PostAutoscaleRules autoscale set rule
*/
func (a *Client) PostAutoscaleRules(params *PostAutoscaleRulesParams) (*PostAutoscaleRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAutoscaleRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAutoscaleRules",
		Method:             "POST",
		PathPattern:        "/autoscale/rules",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAutoscaleRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAutoscaleRulesOK), nil

}

/*
PostAutoscaleRun autoscale run
*/
func (a *Client) PostAutoscaleRun(params *PostAutoscaleRunParams) (*PostAutoscaleRunOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAutoscaleRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAutoscaleRun",
		Method:             "POST",
		PathPattern:        "/autoscale/run",
		ProducesMediaTypes: []string{"application/x-json-stream"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAutoscaleRunReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAutoscaleRunOK), nil

}

/*
PostDockerContainerContainerMove move container
*/
func (a *Client) PostDockerContainerContainerMove(params *PostDockerContainerContainerMoveParams) (*PostDockerContainerContainerMoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDockerContainerContainerMoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDockerContainerContainerMove",
		Method:             "POST",
		PathPattern:        "/docker/container/{container}/move",
		ProducesMediaTypes: []string{"application/x-json-stream"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDockerContainerContainerMoveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDockerContainerContainerMoveOK), nil

}

/*
PostDockerContainersMove move containers
*/
func (a *Client) PostDockerContainersMove(params *PostDockerContainersMoveParams) (*PostDockerContainersMoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDockerContainersMoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDockerContainersMove",
		Method:             "POST",
		PathPattern:        "/docker/containers/move",
		ProducesMediaTypes: []string{"application/x-json-stream"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDockerContainersMoveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDockerContainersMoveOK), nil

}

/*
PostDockerLogs logs config set
*/
func (a *Client) PostDockerLogs(params *PostDockerLogsParams) (*PostDockerLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDockerLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDockerLogs",
		Method:             "POST",
		PathPattern:        "/docker/logs",
		ProducesMediaTypes: []string{"application/x-json-stream"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDockerLogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDockerLogsOK), nil

}

/*
PostDockerNodecontainers node container create
*/
func (a *Client) PostDockerNodecontainers(params *PostDockerNodecontainersParams) (*PostDockerNodecontainersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDockerNodecontainersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDockerNodecontainers",
		Method:             "POST",
		PathPattern:        "/docker/nodecontainers",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDockerNodecontainersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDockerNodecontainersOK), nil

}

/*
PostDockerNodecontainersNodecontainerUpgrade node container upgrade
*/
func (a *Client) PostDockerNodecontainersNodecontainerUpgrade(params *PostDockerNodecontainersNodecontainerUpgradeParams) (*PostDockerNodecontainersNodecontainerUpgradeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDockerNodecontainersNodecontainerUpgradeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDockerNodecontainersNodecontainerUpgrade",
		Method:             "POST",
		PathPattern:        "/docker/nodecontainers/{nodecontainer}/upgrade",
		ProducesMediaTypes: []string{"application/x-json-stream"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDockerNodecontainersNodecontainerUpgradeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDockerNodecontainersNodecontainerUpgradeOK), nil

}

/*
PostEventsBlocks add event block
*/
func (a *Client) PostEventsBlocks(params *PostEventsBlocksParams) (*PostEventsBlocksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEventsBlocksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostEventsBlocks",
		Method:             "POST",
		PathPattern:        "/events/blocks",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostEventsBlocksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostEventsBlocksOK), nil

}

/*
PostEventsEventCancel event cancel
*/
func (a *Client) PostEventsEventCancel(params *PostEventsEventCancelParams) (*PostEventsEventCancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEventsEventCancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostEventsEventCancel",
		Method:             "POST",
		PathPattern:        "/events/{event}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostEventsEventCancelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostEventsEventCancelOK), nil

}

/*
PostIaasTemplates template create
*/
func (a *Client) PostIaasTemplates(params *PostIaasTemplatesParams) (*PostIaasTemplatesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIaasTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIaasTemplates",
		Method:             "POST",
		PathPattern:        "/iaas/templates",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostIaasTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIaasTemplatesCreated), nil

}

/*
PostNode add node
*/
func (a *Client) PostNode(params *PostNodeParams) (*PostNodeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNode",
		Method:             "POST",
		PathPattern:        "/node",
		ProducesMediaTypes: []string{"application/x-json-stream"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNodeCreated), nil

}

/*
PostNodeRebalance rebalance units in nodes
*/
func (a *Client) PostNodeRebalance(params *PostNodeRebalanceParams) (*PostNodeRebalanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNodeRebalanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNodeRebalance",
		Method:             "POST",
		PathPattern:        "/node/rebalance",
		ProducesMediaTypes: []string{"application/x-json-stream"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNodeRebalanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNodeRebalanceOK), nil

}

/*
PostNodeStatus set node status
*/
func (a *Client) PostNodeStatus(params *PostNodeStatusParams) (*PostNodeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNodeStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNodeStatus",
		Method:             "POST",
		PathPattern:        "/node/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNodeStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNodeStatusOK), nil

}

/*
PostPlans plan create
*/
func (a *Client) PostPlans(params *PostPlansParams) (*PostPlansCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPlansParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPlans",
		Method:             "POST",
		PathPattern:        "/plans",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPlansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPlansCreated), nil

}

/*
PostPlatforms add platform
*/
func (a *Client) PostPlatforms(params *PostPlatformsParams) (*PostPlatformsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPlatformsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPlatforms",
		Method:             "POST",
		PathPattern:        "/platforms",
		ProducesMediaTypes: []string{"application/x-json-stream"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPlatformsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPlatformsOK), nil

}

/*
PostPools pool create
*/
func (a *Client) PostPools(params *PostPoolsParams) (*PostPoolsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPoolsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPools",
		Method:             "POST",
		PathPattern:        "/pools",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPoolsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPoolsCreated), nil

}

/*
PostPoolsPoolTeam add team too pool
*/
func (a *Client) PostPoolsPoolTeam(params *PostPoolsPoolTeamParams) (*PostPoolsPoolTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPoolsPoolTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPoolsPoolTeam",
		Method:             "POST",
		PathPattern:        "/pools/{pool}/team",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPoolsPoolTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPoolsPoolTeamOK), nil

}

/*
PostRoleDefault add default role
*/
func (a *Client) PostRoleDefault(params *PostRoleDefaultParams) (*PostRoleDefaultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRoleDefaultParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRoleDefault",
		Method:             "POST",
		PathPattern:        "/role/default",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRoleDefaultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRoleDefaultOK), nil

}

/*
PostRolesRolePermissions add permissions
*/
func (a *Client) PostRolesRolePermissions(params *PostRolesRolePermissionsParams) (*PostRolesRolePermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRolesRolePermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRolesRolePermissions",
		Method:             "POST",
		PathPattern:        "/roles/{role}/permissions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRolesRolePermissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRolesRolePermissionsOK), nil

}

/*
PostRolesRoleUser assign role to user
*/
func (a *Client) PostRolesRoleUser(params *PostRolesRoleUserParams) (*PostRolesRoleUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRolesRoleUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRolesRoleUser",
		Method:             "POST",
		PathPattern:        "/roles/{role}/user",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRolesRoleUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostRolesRoleUserOK), nil

}

/*
PostServicesServiceInstances service instance create
*/
func (a *Client) PostServicesServiceInstances(params *PostServicesServiceInstancesParams) (*PostServicesServiceInstancesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostServicesServiceInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostServicesServiceInstances",
		Method:             "POST",
		PathPattern:        "/services/{service}/instances",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostServicesServiceInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostServicesServiceInstancesCreated), nil

}

/*
PostSwap app swap
*/
func (a *Client) PostSwap(params *PostSwapParams) (*PostSwapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSwapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSwap",
		Method:             "POST",
		PathPattern:        "/swap",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSwapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSwapOK), nil

}

/*
PostTeams team create
*/
func (a *Client) PostTeams(params *PostTeamsParams) (*PostTeamsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTeamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTeams",
		Method:             "POST",
		PathPattern:        "/teams",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostTeamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTeamsCreated), nil

}

/*
PostTeamsTeam team update
*/
func (a *Client) PostTeamsTeam(params *PostTeamsTeamParams) (*PostTeamsTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTeamsTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTeamsTeam",
		Method:             "POST",
		PathPattern:        "/teams/{team}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostTeamsTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTeamsTeamOK), nil

}

/*
PostUsersEmailPassword reset password
*/
func (a *Client) PostUsersEmailPassword(params *PostUsersEmailPasswordParams) (*PostUsersEmailPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsersEmailPasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUsersEmailPassword",
		Method:             "POST",
		PathPattern:        "/users/{email}/password",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUsersEmailPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUsersEmailPasswordOK), nil

}

/*
PostUsersKeys add key
*/
func (a *Client) PostUsersKeys(params *PostUsersKeysParams) (*PostUsersKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsersKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUsersKeys",
		Method:             "POST",
		PathPattern:        "/users/keys",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUsersKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUsersKeysOK), nil

}

/*
PutAppAppRoutersRouter update app router
*/
func (a *Client) PutAppAppRoutersRouter(params *PutAppAppRoutersRouterParams) (*PutAppAppRoutersRouterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAppAppRoutersRouterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAppAppRoutersRouter",
		Method:             "PUT",
		PathPattern:        "/app/{app}/routers/{router}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAppAppRoutersRouterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAppAppRoutersRouterOK), nil

}

/*
PutAppsApp app update
*/
func (a *Client) PutAppsApp(params *PutAppsAppParams) (*PutAppsAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAppsAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAppsApp",
		Method:             "PUT",
		PathPattern:        "/apps/{app}",
		ProducesMediaTypes: []string{"application/x-json-stream"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAppsAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAppsAppOK), nil

}

/*
PutAppsAppDeployRollbackUpdate rollback update
*/
func (a *Client) PutAppsAppDeployRollbackUpdate(params *PutAppsAppDeployRollbackUpdateParams) (*PutAppsAppDeployRollbackUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAppsAppDeployRollbackUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAppsAppDeployRollbackUpdate",
		Method:             "PUT",
		PathPattern:        "/apps/{app}/deploy/rollback/update",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAppsAppDeployRollbackUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAppsAppDeployRollbackUpdateOK), nil

}

/*
PutAppsAppQuota update application quota
*/
func (a *Client) PutAppsAppQuota(params *PutAppsAppQuotaParams) (*PutAppsAppQuotaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAppsAppQuotaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAppsAppQuota",
		Method:             "PUT",
		PathPattern:        "/apps/{app}/quota",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAppsAppQuotaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAppsAppQuotaOK), nil

}

/*
PutAppsAppTeamsTeam grant access to app
*/
func (a *Client) PutAppsAppTeamsTeam(params *PutAppsAppTeamsTeamParams) (*PutAppsAppTeamsTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAppsAppTeamsTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAppsAppTeamsTeam",
		Method:             "PUT",
		PathPattern:        "/apps/{app}/teams/{team}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAppsAppTeamsTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAppsAppTeamsTeamOK), nil

}

/*
PutConstraints set a pool constraint
*/
func (a *Client) PutConstraints(params *PutConstraintsParams) (*PutConstraintsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutConstraintsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutConstraints",
		Method:             "PUT",
		PathPattern:        "/constraints",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutConstraintsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutConstraintsOK), nil

}

/*
PutIaasTemplatesTemplate template update
*/
func (a *Client) PutIaasTemplatesTemplate(params *PutIaasTemplatesTemplateParams) (*PutIaasTemplatesTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIaasTemplatesTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIaasTemplatesTemplate",
		Method:             "PUT",
		PathPattern:        "/iaas/templates/{template}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutIaasTemplatesTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIaasTemplatesTemplateOK), nil

}

/*
PutNode update nodes
*/
func (a *Client) PutNode(params *PutNodeParams) (*PutNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutNode",
		Method:             "PUT",
		PathPattern:        "/node",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutNodeOK), nil

}

/*
PutRoles updates a role
*/
func (a *Client) PutRoles(params *PutRolesParams) (*PutRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutRoles",
		Method:             "PUT",
		PathPattern:        "/roles",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutRolesOK), nil

}

/*
PutServicesServiceInstancesInstance service instance update
*/
func (a *Client) PutServicesServiceInstancesInstance(params *PutServicesServiceInstancesInstanceParams) (*PutServicesServiceInstancesInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutServicesServiceInstancesInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutServicesServiceInstancesInstance",
		Method:             "PUT",
		PathPattern:        "/services/{service}/instances/{instance}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutServicesServiceInstancesInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutServicesServiceInstancesInstanceOK), nil

}

/*
PutServicesServiceInstancesInstanceApp bind service instance
*/
func (a *Client) PutServicesServiceInstancesInstanceApp(params *PutServicesServiceInstancesInstanceAppParams) (*PutServicesServiceInstancesInstanceAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutServicesServiceInstancesInstanceAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutServicesServiceInstancesInstanceApp",
		Method:             "PUT",
		PathPattern:        "/services/{service}/instances/{instance}/{app}",
		ProducesMediaTypes: []string{"application/x-json-stream"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutServicesServiceInstancesInstanceAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutServicesServiceInstancesInstanceAppOK), nil

}

/*
PutUsersPassword change password
*/
func (a *Client) PutUsersPassword(params *PutUsersPasswordParams) (*PutUsersPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUsersPasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutUsersPassword",
		Method:             "PUT",
		PathPattern:        "/users/password",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutUsersPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutUsersPasswordOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
