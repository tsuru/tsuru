// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDockerNodeAppsAppContainersParams creates a new GetDockerNodeAppsAppContainersParams object
// with the default values initialized.
func NewGetDockerNodeAppsAppContainersParams() *GetDockerNodeAppsAppContainersParams {
	var ()
	return &GetDockerNodeAppsAppContainersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDockerNodeAppsAppContainersParamsWithTimeout creates a new GetDockerNodeAppsAppContainersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDockerNodeAppsAppContainersParamsWithTimeout(timeout time.Duration) *GetDockerNodeAppsAppContainersParams {
	var ()
	return &GetDockerNodeAppsAppContainersParams{

		timeout: timeout,
	}
}

// NewGetDockerNodeAppsAppContainersParamsWithContext creates a new GetDockerNodeAppsAppContainersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDockerNodeAppsAppContainersParamsWithContext(ctx context.Context) *GetDockerNodeAppsAppContainersParams {
	var ()
	return &GetDockerNodeAppsAppContainersParams{

		Context: ctx,
	}
}

// NewGetDockerNodeAppsAppContainersParamsWithHTTPClient creates a new GetDockerNodeAppsAppContainersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDockerNodeAppsAppContainersParamsWithHTTPClient(client *http.Client) *GetDockerNodeAppsAppContainersParams {
	var ()
	return &GetDockerNodeAppsAppContainersParams{
		HTTPClient: client,
	}
}

/*GetDockerNodeAppsAppContainersParams contains all the parameters to send to the API endpoint
for the get docker node apps app containers operation typically these are written to a http.Request
*/
type GetDockerNodeAppsAppContainersParams struct {

	/*App
	  App name.

	*/
	App string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get docker node apps app containers params
func (o *GetDockerNodeAppsAppContainersParams) WithTimeout(timeout time.Duration) *GetDockerNodeAppsAppContainersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get docker node apps app containers params
func (o *GetDockerNodeAppsAppContainersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get docker node apps app containers params
func (o *GetDockerNodeAppsAppContainersParams) WithContext(ctx context.Context) *GetDockerNodeAppsAppContainersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get docker node apps app containers params
func (o *GetDockerNodeAppsAppContainersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get docker node apps app containers params
func (o *GetDockerNodeAppsAppContainersParams) WithHTTPClient(client *http.Client) *GetDockerNodeAppsAppContainersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get docker node apps app containers params
func (o *GetDockerNodeAppsAppContainersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApp adds the app to the get docker node apps app containers params
func (o *GetDockerNodeAppsAppContainersParams) WithApp(app string) *GetDockerNodeAppsAppContainersParams {
	o.SetApp(app)
	return o
}

// SetApp adds the app to the get docker node apps app containers params
func (o *GetDockerNodeAppsAppContainersParams) SetApp(app string) {
	o.App = app
}

// WriteToRequest writes these params to a swagger request
func (o *GetDockerNodeAppsAppContainersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param app
	if err := r.SetPathParam("app", o.App); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
