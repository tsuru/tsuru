// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// PutAppsNameReader is a Reader for the PutAppsName structure.
type PutAppsNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutAppsNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutAppsNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutAppsNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPutAppsNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutAppsNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutAppsNameOK creates a PutAppsNameOK with default headers values
func NewPutAppsNameOK() *PutAppsNameOK {
	return &PutAppsNameOK{}
}

/*PutAppsNameOK handles this case with default header values.

App updated
*/
type PutAppsNameOK struct {
}

func (o *PutAppsNameOK) Error() string {
	return fmt.Sprintf("[PUT /apps/{name}][%d] putAppsNameOK ", 200)
}

func (o *PutAppsNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutAppsNameBadRequest creates a PutAppsNameBadRequest with default headers values
func NewPutAppsNameBadRequest() *PutAppsNameBadRequest {
	return &PutAppsNameBadRequest{}
}

/*PutAppsNameBadRequest handles this case with default header values.

Invalid new pool
*/
type PutAppsNameBadRequest struct {
}

func (o *PutAppsNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /apps/{name}][%d] putAppsNameBadRequest ", 400)
}

func (o *PutAppsNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutAppsNameUnauthorized creates a PutAppsNameUnauthorized with default headers values
func NewPutAppsNameUnauthorized() *PutAppsNameUnauthorized {
	return &PutAppsNameUnauthorized{}
}

/*PutAppsNameUnauthorized handles this case with default header values.

Unauthorized
*/
type PutAppsNameUnauthorized struct {
}

func (o *PutAppsNameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /apps/{name}][%d] putAppsNameUnauthorized ", 401)
}

func (o *PutAppsNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutAppsNameNotFound creates a PutAppsNameNotFound with default headers values
func NewPutAppsNameNotFound() *PutAppsNameNotFound {
	return &PutAppsNameNotFound{}
}

/*PutAppsNameNotFound handles this case with default header values.

Not found
*/
type PutAppsNameNotFound struct {
}

func (o *PutAppsNameNotFound) Error() string {
	return fmt.Sprintf("[PUT /apps/{name}][%d] putAppsNameNotFound ", 404)
}

func (o *PutAppsNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
