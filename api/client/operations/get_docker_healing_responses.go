// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// GetDockerHealingReader is a Reader for the GetDockerHealing structure.
type GetDockerHealingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDockerHealingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetDockerHealingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewGetDockerHealingNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetDockerHealingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetDockerHealingUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDockerHealingOK creates a GetDockerHealingOK with default headers values
func NewGetDockerHealingOK() *GetDockerHealingOK {
	return &GetDockerHealingOK{}
}

/*GetDockerHealingOK handles this case with default header values.

Ok
*/
type GetDockerHealingOK struct {
}

func (o *GetDockerHealingOK) Error() string {
	return fmt.Sprintf("[GET /docker/healing][%d] getDockerHealingOK ", 200)
}

func (o *GetDockerHealingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDockerHealingNoContent creates a GetDockerHealingNoContent with default headers values
func NewGetDockerHealingNoContent() *GetDockerHealingNoContent {
	return &GetDockerHealingNoContent{}
}

/*GetDockerHealingNoContent handles this case with default header values.

No content
*/
type GetDockerHealingNoContent struct {
}

func (o *GetDockerHealingNoContent) Error() string {
	return fmt.Sprintf("[GET /docker/healing][%d] getDockerHealingNoContent ", 204)
}

func (o *GetDockerHealingNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDockerHealingBadRequest creates a GetDockerHealingBadRequest with default headers values
func NewGetDockerHealingBadRequest() *GetDockerHealingBadRequest {
	return &GetDockerHealingBadRequest{}
}

/*GetDockerHealingBadRequest handles this case with default header values.

Invalid data
*/
type GetDockerHealingBadRequest struct {
}

func (o *GetDockerHealingBadRequest) Error() string {
	return fmt.Sprintf("[GET /docker/healing][%d] getDockerHealingBadRequest ", 400)
}

func (o *GetDockerHealingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDockerHealingUnauthorized creates a GetDockerHealingUnauthorized with default headers values
func NewGetDockerHealingUnauthorized() *GetDockerHealingUnauthorized {
	return &GetDockerHealingUnauthorized{}
}

/*GetDockerHealingUnauthorized handles this case with default header values.

Unauthorized
*/
type GetDockerHealingUnauthorized struct {
}

func (o *GetDockerHealingUnauthorized) Error() string {
	return fmt.Sprintf("[GET /docker/healing][%d] getDockerHealingUnauthorized ", 401)
}

func (o *GetDockerHealingUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
