swagger: "2.0"
info:
  title: Tsuru
  description: Open source, extensible and Docker-based Platform as a Service (PaaS)
  version: "1.6"
schemes:
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  /1.0/apps:
    get:
      operationId: AppList
      description: List apps.
      parameters:
        - name: locked
          description: Filter applications by lock status.
          in: query
          type: boolean
        - name: name
          description: Filter applications by name.
          in: query
          type: string
        - name: owner
          description: Filter applications by owner.
          in: query
          type: string
        - name: platform
          description: Filter applications by platform.
          in: query
          type: string
        - name: pool
          description: Filter applications by pool.
          in: query
          type: string
        - name: status
          description: Filter applications by unit status.
          in: query
          type: string
        - name: tag
          description: Filter applications by tag.
          in: query
          type: array
          items:
            type: string
        - name: teamOwner
          description: Filter applications by team owner.
          in: query
          type: string
      produces:
      - application/json
      responses:
        '200':
          description: List apps
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/MiniApp'
        '204':
          description: No content
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags: 
        - app
      security:
        - Bearer: []
    post:
      operationId: AppCreate
      description: Create a new app.
      parameters:
        - name: app
          required: true
          in: body
          schema: 
            $ref: '#/definitions/App'
      produces:
      - application/json
      consumes:
      - application/json
      responses:
        '201': 
          description: App created
          schema:
            $ref: '#/definitions/AppCreateResponse'
        '400': 
          description: Invalid data
          schema:
            $ref: '#/definitions/ErrorMessage'
        '401': 
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
        '403': 
          description: Quota exceeded
          schema:
            $ref: '#/definitions/ErrorMessage'
        '409': 
          description: App already exists
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags: 
        - app
      security:
        - Bearer: []
  /1.0/apps/{app}:
    get:
      operationId: AppGet
      description: Get info about a tsuru app.
      parameters:
        - name: app
          in: path
          required: true
          type: string
          minLength: 1
          description: Appname.
      produces:
      - application/json
      responses:
        '200':
          description: 'App info'
          schema:
            $ref: '#/definitions/App'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorMessage'
        '404':
          description: App not found.
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - app
      security:
        - Bearer: []
    delete:
      operationId: AppDelete
      description: Delete a tsuru app.
      parameters:
        - name: app
          in: path
          required: true
          type: string
          minLength: 1
          description: App name.
      produces:
      - application/x-json-stream
      responses:
        '200':
          description: App removed.
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/ErrorMessage'
        '404':
          description: App not found.
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - app
      security:
        - Bearer: []
  /1.0/apps/{app}/env:
    parameters:
      - name: app
        in: path
        required: true
        type: string
        minLength: 1
        description: App name.
    post:
      operationId: EnvSet
      description: Set new environment variable.
      parameters:
        - name: envs
          in: body
          required: true
          schema:
            $ref: '#/definitions/EnvSetData'
          description: Environment variables.
      produces:
      - application/x-json-stream
      consumes:
      - application/json
      responses:
        '200':
          description: Envs updated
          schema:
            $ref: '#/definitions/EnvSetResponse'
        '400':
          description: Invalid data
          schema:
            $ref: '#/definitions/ErrorMessage'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
        '404':
          description: App not found
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - app
      security:
        - Bearer: []
    get:
      operationId: EnvGet
      description: Get app environment variables.
      parameters:
        - name: env
          description: Environment variable name.
          type: string
          in: query
      produces:
        - application/json
      responses:
        '200':
          description: Environment variables
          schema:
            type: array
            items:
              $ref: '#/definitions/Env'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
        '404':
          description: App not found
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - app
      security:
        - Bearer: []
    delete:
      operationId: EnvUnset
      description: Unset app environment variables.
      parameters:
        - name: env
          in: query
          type: array
          collectionFormat: multi
          required: true
          minItems: 1
          items:
            type: string
        - name: norestart
          in: query
          required: true
          type: boolean
      produces:
        - application/x-json-stream
      responses:
        '200':
          description: Envs deleted
        '400':
          description: Invalid data
          schema:
            $ref: '#/definitions/ErrorMessage'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
        '404':
          description: App not found
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - app
      security:
        - Bearer: []
  /1.2/node:
    post:
      operationId: NodeAdd
      description: Add a node.
      parameters:
        - name: nodeAddData
          in: body
          required: true
          schema:
            $ref: '#/definitions/NodeAddData'
      produces:
      - application/x-json-stream
      consumes:
      - application/json
      responses:
        '201':
          description: Ok
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
        '400':
          description: Invalid parameters
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - node
      security:
        - Bearer: []
    put:
      operationId: NodeUpdate
      description: Update node.
      parameters:
        - name: nodeUpdateData
          in: body
          required: true
          schema:
            $ref: '#/definitions/NodeUpdateData'
      consumes:
      - application/json
      responses:
        '200':
          description: Ok
        '400':
          description: Invalid data
          schema:
            $ref: '#/definitions/ErrorMessage'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - node
      security:
        - Bearer: []
  /1.2/node/{address}:
    parameters:
      - name: address
        in: path
        required: true
        type: string
        minLength: 1
        description: Node address.
    delete:
      operationId: NodeDelete
      description: Remove node.
      parameters:
        - name: no-rebalance
          in: query
          required: true
          type: boolean
          description: Trigger node rebalance.
        - name: remove-iaas
          in: query
          required: true
          type: boolean
          description: Remove machine from IaaS.
      responses:
        '200':
          description: Ok
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - node
      security:
        - Bearer: []
    get:
      operationId: NodeGet
      description: Get node information.
      produces:
        - application/json
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/NodeGetResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - node
      security:
        - Bearer: []
  /1.4/volumes:
    get:
      operationId: VolumeList
      description: List volumes.
      produces:
      - application/json
      responses:
        '200':
          description: List volumes
          schema:
            $ref: '#/definitions/VolumeListResponse'
        '204':
          description: No content
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - volume
      security:
        - Bearer: []
    post:
      operationId: VolumeCreate
      description: Create volume.
      parameters:
        - name: volumeData
          in: body
          required: true
          schema:
            $ref: '#/definitions/Volume'
      produces:
        - application/json
      responses:
        '201':
          description: Volume created
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
        '409':
          description: Volume already exists
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - volume
      security:
        - Bearer: []
  /1.0/pools:
    get:
      operationId: PoolList
      description: List pools.
      produces:
        - application/json
      responses:
        '200':
          description: Pools list
          schema:
            type: array
            items:
              $ref: '#/definitions/Pool'
        '204':
          description: No content
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - pool
      security:
        - Bearer: []
    post:
      operationId: PoolCreate
      description: Creates a pool.
      parameters:
        - name: PoolCreateData
          in: body
          required: true
          schema:
            $ref: '#/definitions/PoolCreateData'
      consumes:
        - application/json
      responses:
        '201':
          description: Pool created
        '400':
          description: Invalid data
          schema:
            $ref: '#/definitions/ErrorMessage'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
        '409':
          description: Pool already exists
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - pool
      security:
        - Bearer: []
  /pools/{pool}:
    parameters:
      - name: pool
        in: path
        required: true
        type: string
    delete:
      operationId: PoolDelete
      description: Deletes a pool.
      responses:
        '200':
          description: Pool deleted
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
        '403':
          description: Pool still has apps
          schema:
            $ref: '#/definitions/ErrorMessage'
        '404':
          description: Pool not found
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - pool
      security:
        - Bearer: []
    put:
      operationId: PoolUpdate
      description: Updates a pool.
      parameters:
        - name: PoolUpdateData
          in: body
          required: true
          schema:
            $ref: '#/definitions/PoolUpdateData'
      consumes:
        - application/json
      responses:
        '200':
          description: Pool updated
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
        '404':
          description: Pool not found
          schema:
            $ref: '#/definitions/ErrorMessage'
        '409':
          description: Default pool already defined
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - pool
      security:
        - Bearer: []
  /1.4/volumes/{volume}:
    parameters:
      - name: volume
        in: path
        required: true
        type: string
        minLength: 1
        description: Volume name.
    delete:
      operationId: VolumeDelete
      description: Delete volume.
      produces:
      - application/json
      responses:
        '200':
          description: Volume deleted
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
        '404':
          description: Volume not found
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - volume
      security:
        - Bearer: []
    get:
      operationId: VolumeGet
      description: Get a volume.
      produces:
        - application/json
      responses:
        '200':
          description: Volume
          schema:
            $ref: '#/definitions/Volume'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
        '409':
          description: Volume already exists
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - volume
      security:
        - Bearer: []
  /1.4/volumes/{volume}/bind:
    parameters:
      - name: volume
        in: path
        required: true
        type: string
        minLength: 1
        description: Volume name.
      - name: BindData
        in: body
        schema:
          type: object
          $ref: '#/definitions/VolumeBindData'
    post:
      operationId: VolumeBind
      description: Bind volume.
      produces:
        - application/json
      responses:
        '200':
          description: Volume bind
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
        '404':
          description: Volume not found
          schema:
            $ref: '#/definitions/ErrorMessage'
        '409':
          description: Volume bind already exists
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - volume
      security:
        - Bearer: []
    delete:
      operationId: VolumeUnbind
      description: Unbind volume.
      produces:
      - application/json
      responses:
        '200':
          description: Volume unbinded
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
        '404':
          description: Volume not found
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - volume
      security:
        - Bearer: []
  /1.4/volumeplans:
    get:
      operationId: VolumePlansList
      description: List volume plans.
      produces:
      - application/json
      responses:
        '200':
          description: Volume plans list
          schema:
            $ref: '#/definitions/VolumePlansListResponse'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - volume
      security:
        - Bearer: []
definitions:
  ErrorMessage:
    description: Error message.
    type: string
  Pool:
    type: object
    properties:
      name:
        type: string
      default:
        type: boolean
      provisioner:
        type: string
  PoolCreateData:
    type: object
    properties:
      name:
        type: string
      public:
        type: boolean
      default:
        type: boolean
      force:
        type: boolean
      provisioner:
        type: string
  PoolUpdateData:
    type: object
    properties:
      default:
        type: boolean
      public:
        type: boolean
      force:
        type: boolean
  NodeUpdateData:
    type: object
    properties:
      address:
        type: string
      pool:
        type: string
      metadata:
        type: object
        additionalProperties:
          type: string
      enable:
        type: boolean
      disable:
        type: boolean
  NodeAddData:
    type: object
    properties:
      address:
        type: string
      cacert:
        description: Docker API CA certificate.
        type: string
      clientcert:
        description: Docker API client certificate.
        type: string
      clientkey:
        description: Docker API client key.
        type: string
      register:
        description: Register an existing node.
        type: boolean
      waitto:
        description: Timeout in nanoseconds.
        type: integer
        format: int64
      metadata:
        type: object
        additionalProperties:
          type: string
  NodeGetResponse:
    type: object
    properties:
      node:
        type: object
        $ref: '#/definitions/Node'
      status:
        type: object
        $ref: '#/definitions/NodeStatus'
      units:
        type: object
        $ref: '#/definitions/Unit'
  Node:
    type: object
    properties:
      address:
        type: string
      iaasid:
        type: string
      status:
        type: string
      pool:
        type: string
      provisioner:
        type: string
      metadata:
        type: object
        additionalProperties:
          type: string
  NodeStatus:
    type: object
    properties:
      address:
        type: string
      checks:
        type: array
        items:
          type: object
          $ref: '#/definitions/NodeCheck'
      lastsuccess:
        type: string
        format: date-time
      lastupdate:
        type: string
        format: date-time
  NodeCheck:
    type: object
    properties:
      time:
        type: string
        format: date-time
      checks:
        type: array
        items:
          type: object
          $ref: '#/definitions/NodeCheckResult'
  NodeCheckResult:
    type: object
    properties:
      name:
        type: string
      err:
        type: string
      successful:
        type: boolean
  VolumeListResponse:
    description: Response returned by Volume List.
    type: array
    items:
      type: object
      $ref: "#/definitions/Volume"
  VolumePlansListResponse:
    description: Response returned by Volume Plans list.
    type: object
    additionalProperties:
      type: object
      $ref: "#/definitions/VolumePlan"
  Volume:
    description: Volume
    type: object
    properties:
      name:
        type: string
        description: Volume name.
      pool:
        type: string
        description: Volume pool.
      teamOwner:
        type: string
        description: Team that owns the volume.
      status:
        type: string
        description: Volume status.
      plan:
        type: object
        description: Volume plan.
        $ref: '#/definitions/VolumePlan'
      binds:
        type: array
        description: Volume binds.
        items:
          type: object
          $ref: '#/definitions/VolumeBind'
      opts:
        type: object
        description: Custom volume options.
        additionalProperties:
          type: string
  VolumePlan:
    description: Volume plan.
    type: object
    properties:
      name:
        description: Volume plan name.
        type: string
      opts:
        description: Volume plan opts.
        type: object
        additionalProperties:
          type: string
  VolumeBind:
    type: object
    properties:
      id:
        description: Volume bind ID.
        type: object
        $ref: '#/definitions/VolumeBindID'
      readonly:
        description: Volume is read-only.
        type: boolean
  VolumeBindID:
    type: object
    properties:
      app:
        description: App the volume is bound to.
        type: string
      mountpoint:
        description: Volume mountpoint.
        type: string
      volume:
        description: Volume name.
        type: string
  VolumeBindData:
    type: object
    properties:
      mountpoint:
        type: string
      norestart:
        type: boolean
      readonly:
        type: boolean
  App:
    description: Tsuru app.
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: App name.
      tag:
        type: array
        items:
          type: string
        description: App tags.
      router:
        type: string
        description: App router.
      routeropts:
        type: object
        additionalProperties:
          type: string
        description: Custom router options.
      plan:
        type: string
        description: App plan.
      pool:
        type: string
        description: App pool.
      platform:
        type: string
        description: App platform.
      description:
        type: string
        description: App description.
      teamOwner:
        type: string
        description: Team that owns the app.
  AppCreateResponse:
    description: Newly created app information.
    type: object
    properties:
      status:
        type: string
      repository_url:
        type: string
      ip:
        type: string
  MiniApp:
    description: List containing minimal information about apps.
    type: object
    properties:
      name:
        type: string
      pool:
        type: string
      teamOwner:
        type: string
      plan:
        type: object
        $ref: '#/definitions/Plan'
      units:
        type: array
        items:
          type: object
          $ref: '#/definitions/Unit'
      cname:
        type: array
        items:
          type: string
      ip:
        type: string
      routers:
        type: array
        items:
          type: object
          $ref: '#/definitions/Router'
      lock:
        type: object
        $ref: '#/definitions/Lock'
      tags:
        type: array
        items:
          type: string
      error:
        type: string
  Plan:
    description: App plan.
    type: object
    properties:
      name:
        type: string
      memory:
        type: integer
        format: int64
        minimum: 0
      swap:
        type: integer
        format: int64
        minimum: 0
      cpushare:
        type: integer
        minimum: 0
      default:
        type: boolean
  Env:
    description: Environment variable.
    type: object
    properties:
      name:
        type: string
      value:
        type: string
  EnvSetData:
    description: Data sent to the environment set endpoint.
    type: object
    properties:
      envs:
        type: array
        items:
          type: object
          $ref: '#/definitions/Env'
        minItems: 1
      norestart:
        type: boolean
      private:
        type: boolean
  EnvSetResponse:
    description: Environment variables response information.
    type: array
    items:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        public:
          type: boolean
  Unit:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      appname:
        type: string
      processname:
        type: string
      type:
        type: string
      ip:
        type: string
      status:
        type: string
      address:
        type: object
        $ref: '#/definitions/URL'
  Router:
    type: object
    properties:
      name:
        type: string
      opts:
        type: object
        additionalProperties:
          type: string
      addres:
        type: string
      type:
        type: string
      status:
        type: string
      status-detail:
        type: string
  Lock:
    type: object
    properties:
      locked:
        type: boolean
      reason:
        type: string
      owner:
        type: string
      acquireDate:
        type: string
  URL:
    type: object
    properties:
      scheme:
        type: string
      host:
        type: string
  
