swagger: "2.0"
info:
  title: Tsuru
  description: Open source, extensible and Docker-based Platform as a Service (PaaS)
  version: "1.6"
schemes:
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  /1.0/services:
    get:
      operationId: ServicesList
      description: List services
      produces:
        - application/json
      responses:
        "200":
          description: Services
          schema:
            type: array
            items:
              type: object
              $ref: "#/definitions/Service"
        "204":
          description: No content
      tags:
        - service
      security:
        - Bearer: []
  /1.0/services/instances:
    get:
      operationId: InstancesList
      description: List service instances
      produces:
        - application/json
      parameters:
        - name: app
          description: Filter instances by app name
          type: string
          in: query
      responses:
        "200":
          description: Service instances
          schema:
            type: array
            items:
              type: object
              $ref: "#/definitions/Service"
        "204":
          description: No content
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - service
      security:
        - Bearer: []
  /1.0/services/{service}/instances:
    parameters:
      - name: service
        in: path
        required: true
        type: string
        minLength: 1
        description: Service name.
    post:
      operationId: InstanceCreate
      description: Create a service instance
      consumes:
        - application/json
      parameters:
        - name: instance
          required: true
          in: body
          schema:
            $ref: "#/definitions/ServiceInstance"
      responses:
        "200":
          description: Service instance created
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Service not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - service
      security:
        - Bearer: []
  /1.0/services/{service}/instances/{instance}:
    parameters:
      - name: service
        in: path
        required: true
        type: string
        minLength: 1
        description: Service name.
      - name: instance
        in: path
        required: true
        type: string
        minLength: 1
        description: Instance name.
    get:
      operationId: InstanceGet
      description: Get service instance information
      produces:
        - application/json
      responses:
        "200":
          description: Service instance
          schema:
            $ref: "#/definitions/ServiceInstanceInfo"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Service instance not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - service
      security:
        - Bearer: []
    put:
      operationId: InstanceUpdate
      description: Update a service instance
      consumes:
        - application/json
      parameters:
        - name: updateData
          in: body
          schema:
            $ref: "#/definitions/ServiceInstanceUpdateData"
      responses:
        "200":
          description: Service instance updated
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Service instance not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - service
      security:
        - Bearer: []
    delete:
      operationId: InstanceDelete
      description: Remove service instance
      produces:
        - application/x-json-stream
      parameters:
        - name: unbindall
          description: Remove current binds to this instance
          in: query
          type: boolean
          required: true
      responses:
        "200":
          description: Service removed
        "400":
          description: Bad request
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Service instance not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - service
      security:
        - Bearer: []

  /1.0/services/{service}/instances/{instance}/{app}:
    parameters:
      - name: service
        in: path
        required: true
        type: string
        minLength: 1
        description: Service name.
      - name: instance
        in: path
        required: true
        type: string
        minLength: 1
        description: Instance name.
      - name: app
        in: path
        required: true
        type: string
        minLength: 1
        description: App name.
    put:
      operationId: ServiceInstanceBind
      description: Bind the service instance to app
      parameters:
        - name: bindData
          in: body
          schema:
            $ref: "#/definitions/ServiceInstanceBind"
      produces:
        - application/x-json-stream
      responses:
        "200":
          description: Instance bound to the app.
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - service
      security:
        - Bearer: []
    delete:
      operationId: ServiceInstanceUnbind
      description: Unbind the service instance from app
      parameters:
        - name: unbindData
          in: body
          schema:
            $ref: "#/definitions/ServiceInstanceUnbind"
      produces:
        - application/x-json-stream
      responses:
        "200":
          description: Instance has been unbound from the app.
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - service
      security:
        - Bearer: []
  /1.7/brokers:
    get:
      operationId: ServiceBrokerList
      description: List service brokers
      produces:
        - application/json
      responses:
        "200":
          description: List service brokers
          schema:
            type: object
            $ref: "#/definitions/ServiceBrokerList"
        "204":
          description: No content
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - service
      security:
        - Bearer: []
    post:
      operationId: ServiceBrokerCreate
      description: Create service broker
      consumes:
        - application/json
      parameters:
        - name: broker
          required: true
          in: body
          schema:
            $ref: "#/definitions/ServiceBroker"
      responses:
        "200":
          description: Service Broker created.
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
        "409":
          description: Service Broker already exists.
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - service
      security:
        - Bearer: []
  /1.7/brokers/{name}:
    parameters:
      - name: name
        in: path
        required: true
        type: string
        minLength: 1
        description: Service Broker name.
    delete:
      operationId: ServiceBrokerDelete
      responses:
        "200":
          description: Service Broker deleted.
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Service Broker not found.
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - service
      security:
        - Bearer: []
    put:
      operationId: ServiceBrokerUpdate
      description: Update service broker
      consumes:
        - application/json
      parameters:
        - name: broker
          required: true
          in: body
          schema:
            $ref: "#/definitions/ServiceBroker"
      responses:
        "200":
          description: Service Broker updated.
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Service Broker not found.
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - service
      security:
        - Bearer: []
  /1.0/apps:
    get:
      operationId: AppList
      description: List apps.
      parameters:
        - name: locked
          description: Filter applications by lock status.
          in: query
          type: boolean
        - name: name
          description: Filter applications by name.
          in: query
          type: string
        - name: owner
          description: Filter applications by owner.
          in: query
          type: string
        - name: platform
          description: Filter applications by platform.
          in: query
          type: string
        - name: pool
          description: Filter applications by pool.
          in: query
          type: string
        - name: status
          description: Filter applications by unit status.
          in: query
          type: string
        - name: tag
          description: Filter applications by tag.
          in: query
          type: array
          items:
            type: string
        - name: teamOwner
          description: Filter applications by team owner.
          in: query
          type: string
        - name: simplified
          description: Returns applications without units list.
          in: query
          type: boolean
      produces:
        - application/json
      responses:
        "200":
          description: List apps
          schema:
            type: array
            items:
              type: object
              $ref: "#/definitions/MiniApp"
        "204":
          description: No content
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - app
      security:
        - Bearer: []
    post:
      operationId: AppCreate
      description: Create a new app.
      parameters:
        - name: app
          required: true
          in: body
          schema:
            $ref: "#/definitions/InputApp"
      produces:
        - application/json
      consumes:
        - application/json
      responses:
        "201":
          description: App created
          schema:
            $ref: "#/definitions/AppCreateResponse"
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "403":
          description: Quota exceeded
          schema:
            $ref: "#/definitions/ErrorMessage"
        "409":
          description: App already exists
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - app
      security:
        - Bearer: []
  /1.0/apps/{app}:
    parameters:
      - name: app
        in: path
        required: true
        type: string
        minLength: 1
        description: App name.
    get:
      operationId: AppGet
      description: Get info about a tsuru app.
      produces:
        - application/json
      responses:
        "200":
          description: "App info"
          schema:
            $ref: "#/definitions/App"
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: App not found.
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - app
      security:
        - Bearer: []
    delete:
      operationId: AppDelete
      description: Delete a tsuru app.
      produces:
        - application/x-json-stream
      responses:
        "200":
          description: App removed.
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: App not found.
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - app
      security:
        - Bearer: []
    put:
      operationId: AppUpdate
      description: Update a tsuru app.
      parameters:
        - name: appdata
          required: true
          in: body
          schema:
            $ref: "#/definitions/UpdateApp"
      consumes:
        - application/json
      produces:
      - application/x-json-stream
      responses:
        '200':
          description: App updated
        '400':
          description: Invalid data
          schema:
            $ref: '#/definitions/ErrorMessage'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - app
      security:
        - Bearer: []
  /1.0/apps/{app}/env:
    parameters:
      - name: app
        in: path
        required: true
        type: string
        minLength: 1
        description: App name.
    post:
      operationId: EnvSet
      description: Set new environment variable.
      parameters:
        - name: envs
          in: body
          required: true
          schema:
            $ref: "#/definitions/EnvSetData"
          description: Environment variables.
      produces:
        - application/x-json-stream
      consumes:
        - application/json
      responses:
        "200":
          description: Envs updated
          schema:
            $ref: "#/definitions/EnvSetResponse"
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: App not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - app
      security:
        - Bearer: []
    get:
      operationId: EnvGet
      description: Get app environment variables.
      parameters:
        - name: env
          description: Environment variable name.
          type: string
          in: query
      produces:
        - application/json
      responses:
        "200":
          description: Environment variables
          schema:
            type: array
            items:
              $ref: "#/definitions/Env"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: App not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - app
      security:
        - Bearer: []
    delete:
      operationId: EnvUnset
      description: Unset app environment variables.
      parameters:
        - name: env
          in: query
          type: array
          collectionFormat: multi
          required: true
          minItems: 1
          items:
            type: string
        - name: norestart
          in: query
          required: true
          type: boolean
      produces:
        - application/x-json-stream
      responses:
        "200":
          description: Envs deleted
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: App not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - app
      security:
        - Bearer: []
  /1.0/apps/{app}/quota:
    parameters:
      - name: app
        in: path
        required: true
        type: string
        minLength: 1
        description: App name.
    get:
      operationId: AppQuotaGet
      description: Shows app usage info and its quota limit.
      tags:
        - app
      security:
        - Bearer: []
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/Quota"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: App not found
          schema:
            $ref: "#/definitions/ErrorMessage"
    put:
      operationId: AppQuotaChange
      description: Changes the maximum limit of units allowed for use.
      tags:
        - app
      security:
        - Bearer: []
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: limit
          in: formData
          type: number
          required: true
          description: Number of units allowed for use by the current app. Negative number indicates unlimited.
      produces:
        - application/json
      responses:
        "200":
          description: Quota updated
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "403":
          description: Limit lower than allocated
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: App not found
          schema:
            $ref: "#/definitions/ErrorMessage"
  /1.0/apps/{app}/restart:
    parameters:
      - name: app
        in: path
        required: true
        type: string
        minLength: 1
        description: App name.
    post:
      operationId: AppRestart
      description: Restart App.
      tags:
        - app
      security:
        - Bearer: []
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: process
          in: formData
          type: string
          description: Process number to be restarted. If the process number will not informed, whole application will be restarted.
        - name: version
          in: formData
          type: string
      produces:
        - application/x-json-stream
      responses:
        "200":
          description: App restarted
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: App not found
          schema:
            $ref: "#/definitions/ErrorMessage"
  /1.8/apps/{app}/routable:
    parameters:
      - name: app
        in: path
        required: true
        type: string
        minLength: 1
        description: App name.
    post:
      operationId: AppSetRoutable
      description: Sets a version as routable.
      tags:
        - app
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - name: setRoutableData
          in: body
          required: true
          schema:
            $ref: "#/definitions/SetRoutableArgs"
      produces:
        - application/json
      responses:
        "200":
          description: App updated
        "400":
          description: Invalid arguments
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: App not found
          schema:
            $ref: "#/definitions/ErrorMessage"
  /1.0/platforms/{platform}:
    parameters:
      - name: platform
        in: path
        required: true
        type: string
        minLength: 1
        description: Platform name.
    delete:
      operationId: PlatformDelete
      description: Delete platform.
      responses:
        "200":
          description: Platform removed
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - platform
      security:
        - Bearer: []
    put:
      operationId: PlatformUpdate
      description: Update platform.
      parameters:
        - name: dockerfile_content
          in: formData
          required: true
          type: file
      produces:
        - application/x-json-stream
      consumes:
        - multipart/form-data
      responses:
        "200":
          description: Platform updated
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - platform
      security:
        - Bearer: []
  /1.0/platforms:
    get:
      operationId: PlatformList
      description: List platforms.
      produces:
        - application/json
      responses:
        "200":
          description: Platform list
          schema:
            type: array
            items:
              $ref: "#/definitions/Platform"
        "204":
          description: No content
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - platform
      security:
        - Bearer: []
    post:
      operationId: PlatformAdd
      description: Add new platform.
      produces:
        - application/x-json-stream
      consumes:
        - multipart/form-data
      parameters:
        - name: name
          in: formData
          required: true
          type: string
        - name: dockerfile_content
          in: formData
          required: true
          type: file
      responses:
        "200":
          description: Platform created
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - platform
      security:
        - Bearer: []
  /1.6/platforms/{platform}:
    parameters:
      - name: platform
        in: path
        required: true
        type: string
        minLength: 1
        description: Platform info.
    get:
      operationId: PlatformInfo
      description: Platform info.
      produces:
        - application/json
      responses:
        "200":
          description: Platform info
          schema:
            $ref: "#/definitions/PlatformInfo"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - platform
      security:
        - Bearer: []
  /1.6/platforms/{platform}/rollback:
    parameters:
      - name: platform
        in: path
        required: true
        type: string
        minLength: 1
        description: Platform name.
    post:
      operationId: PlatformRollback
      description: Platform rollback.
      parameters:
        - name: image
          in: query
          required: true
          type: string
      produces:
        - application/x-json-stream
      responses:
        "200":
          description: Ok
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - platform
      security:
        - Bearer: []
  /1.0/teams:
    get:
      operationId: TeamsList
      description: List teams.
      produces:
        - application/json
      responses:
        "200":
          description: Team list.
          schema:
            type: array
            items:
              $ref: "#/definitions/Team"
        "204":
          description: No content.
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - team
      security:
        - Bearer: []
    post:
      operationId: TeamCreate
      description: Create a team.
      consumes:
        - application/json
      parameters:
        - name: teamData
          in: body
          required: true
          schema:
            $ref: "#/definitions/TeamCreateArgs"
      responses:
        "201":
          description: Team created.
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "409":
          description: Team already exists
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - team
      security:
        - Bearer: []
  /1.0/teams/{team}:
    parameters:
      - name: team
        in: path
        required: true
        type: string
        description: Team name.
    delete:
      operationId: TeamDelete
      description: Delete a team.
      responses:
        "200":
          description: Team removed.
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Team not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - team
      security:
        - Bearer: []
  /1.4/teams/{team}:
    parameters:
      - name: team
        in: path
        required: true
        type: string
        description: Team name.
    get:
      operationId: TeamGet
      description: Get a team.
      produces:
        - application/json
      responses:
        "200":
          description: Team data
          schema:
            $ref: "#/definitions/TeamInfo"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Team not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - team
      security:
        - Bearer: []
  /1.6/teams/{team}:
    parameters:
      - name: team
        in: path
        required: true
        type: string
        description: Team name.
    put:
      operationId: TeamUpdate
      description: Update a team.
      parameters:
        - name: updateData
          in: body
          required: true
          schema:
            $ref: "#/definitions/TeamUpdateArgs"
      consumes:
        - application/json
      responses:
        "200":
          description: Team updated
        "400":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Team not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - team
      security:
        - Bearer: []
  /1.0/users:
    get:
      operationId: UsersList
      description: List users.
      parameters:
        - name: userEmail
          in: query
          required: true
          type: string
        - name: role
          in: query
          type: string
        - name: context
          in: query
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: List users.
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - user
      security:
        - Bearer: []
    post:
      operationId: UserCreate
      description: Create a new user.
      parameters:
        - name: UserData
          in: body
          required: true
          schema:
            $ref: "#/definitions/UserData"
      produces:
        - application/x-json-stream
      consumes:
        - application/json
      responses:
        "201":
          description: User created.
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorMessage"
        "409":
          description: User already exists
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - user
      security:
        - Bearer: []
    delete:
      operationId: UserDelete
      description: Delete an user.
      parameters:
        - name: email
          in: query
          type: string
          required: true
          minLength: 1
          description: User e-mail.
      responses:
        "200":
          description: User removed
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - user
      security:
        - Bearer: []
  /1.0/users/api-key:
    get:
      operationId: APITokenGet
      description: Show the API token of an user.
      parameters:
        - name: email
          in: query
          type: string
          required: true
      produces:
        - application/json
      responses:
        "200":
          description: API TOKEN
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: User not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - user
      security:
        - Bearer: []
    post:
      operationId: APITokenRegenerate
      description: Regenerate the API Token of an user.
      parameters:
        - name: email
          in: query
          type: string
          required: true
      produces:
        - application/json
      responses:
        "200":
          description: API TOKEN
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: User not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - user
      security:
        - Bearer: []
  /1.0/users/keys:
    get:
      operationId: SSHKeyList
      description: Show the list of the ssh keys of logged user.
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/SSHKeyListResponse"
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - user
      security:
        - Bearer: []
    post:
      operationId: SSHKeyAdd
      description: Add SSH key to logged user.
      parameters:
        - name: SSHKeyAddData
          in: body
          required: true
          schema:
            $ref: "#/definitions/SSHKeyAddData"
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: Ok
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "409":
          description: Key already exists
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - user
      security:
        - Bearer: []
  /1.0/users/keys/{key}:
    delete:
      operationId: SSHKeyRemove
      description: Delete one ssh key of logged user.
      parameters:
        - name: key
          in: path
          required: true
          type: string
          minLength: 1
      responses:
        "200":
          description: Ok
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - user
      security:
        - Bearer: []
  /1.0/users/info:
    get:
      operationId: UserGet
      description: Get information on logged user.
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/User"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - user
      security:
        - Bearer: []
  /1.0/users/{email}/quota:
    get:
      operationId: UserQuotaGet
      description: Get quota of an user.
      parameters:
        - name: email
          in: path
          required: true
          type: string
          minLength: 1
          description: User e-mail.
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/UserQuotaViewResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: User not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - user
      security:
        - Bearer: []
    put:
      operationId: UserQuotaChange
      description: Change quota of an user.
      parameters:
        - name: email
          in: path
          required: true
          type: string
          minLength: 1
          description: User e-mail.
        - name: limit
          in: query
          required: true
          description: User new quota.
          type: integer
      consumes:
        - application/json
      responses:
        "200":
          description: Quota successfully updated
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: User not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - user
      security:
        - Bearer: []
  /1.0/users/password:
    put:
      operationId: ChangePassword
      description: Change password of logged user.
      parameters:
        - name: ChangePasswordData
          in: body
          required: true
          schema:
            $ref: "#/definitions/ChangePasswordData"
      consumes:
        - application/x-www-form-urlencoded
      responses:
        "200":
          description: Ok
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - user
      security:
        - Bearer: []
  /1.0/users/{email}/password:
    post:
      operationId: ResetPassword
      description: Reset password of an user.
      parameters:
        - name: email
          in: path
          required: true
          type: string
          minLength: 1
        - name: token
          in: body
          required: true
          schema:
            type: string
            minLength: 1
      consumes:
        - application/json
      responses:
        "200":
          description: Ok
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - user
      security:
        - Bearer: []
  /1.0/users/tokens:
    delete:
      operationId: UserTokenDelete
      description: Logout.
      responses:
        "200":
          description: Ok
      tags:
        - user
      security:
        - Bearer: []
  /1.2/node:
    get:
      operationId: NodeList
      description: List nodes.
      produces:
        - application/json
      responses:
        "200":
          description: Nodes List.
          schema:
            $ref: "#/definitions/NodeListResponse"
        "204":
          description: No content.
      tags:
        - node
      security:
        - Bearer: []
    post:
      operationId: NodeAdd
      description: Add a node.
      parameters:
        - name: nodeAddData
          in: body
          required: true
          schema:
            $ref: "#/definitions/NodeAddData"
      produces:
        - application/x-json-stream
      consumes:
        - application/json
      responses:
        "201":
          description: Ok
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "400":
          description: Invalid parameters
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - node
      security:
        - Bearer: []
    put:
      operationId: NodeUpdate
      description: Update node.
      parameters:
        - name: nodeUpdateData
          in: body
          required: true
          schema:
            $ref: "#/definitions/NodeUpdateData"
      consumes:
        - application/json
      responses:
        "200":
          description: Ok
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - node
      security:
        - Bearer: []
  /1.2/node/{address}:
    parameters:
      - name: address
        in: path
        required: true
        type: string
        minLength: 1
        description: Node address.
    delete:
      operationId: NodeDelete
      description: Remove node.
      parameters:
        - name: no-rebalance
          in: query
          required: true
          type: boolean
          description: Trigger node rebalance.
        - name: remove-iaas
          in: query
          required: true
          type: boolean
          description: Remove machine from IaaS.
      responses:
        "200":
          description: Ok
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - node
      security:
        - Bearer: []
    get:
      operationId: NodeGet
      description: Get node information.
      produces:
        - application/json
      responses:
        "200":
          description: Ok
          schema:
            $ref: "#/definitions/NodeGetResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - node
      security:
        - Bearer: []
  /1.4/volumes:
    get:
      operationId: VolumeList
      description: List volumes.
      produces:
        - application/json
      responses:
        "200":
          description: List volumes
          schema:
            type: array
            items:
              $ref: "#/definitions/Volume"
        "204":
          description: No content
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - volume
      security:
        - Bearer: []
    post:
      operationId: VolumeCreate
      description: Create volume.
      parameters:
        - name: volumeData
          in: body
          required: true
          schema:
            $ref: "#/definitions/Volume"
      produces:
        - application/json
      responses:
        "201":
          description: Volume created
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "409":
          description: Volume already exists
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - volume
      security:
        - Bearer: []
  /1.0/pools:
    get:
      operationId: PoolList
      description: List pools.
      produces:
        - application/json
      responses:
        "200":
          description: Pools list
          schema:
            type: array
            items:
              $ref: "#/definitions/Pool"
        "204":
          description: No content
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - pool
      security:
        - Bearer: []
    post:
      operationId: PoolCreate
      description: Creates a pool.
      parameters:
        - name: PoolCreateData
          in: body
          required: true
          schema:
            $ref: "#/definitions/PoolCreateData"
      consumes:
        - application/json
      responses:
        "201":
          description: Pool created
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "409":
          description: Pool already exists
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - pool
      security:
        - Bearer: []
  /pools/{pool}:
    parameters:
      - name: pool
        in: path
        required: true
        type: string
    get:
      operationId: PoolGet
      description: Get pool information
      responses:
        "200":
          description: Pool data
          schema:
            $ref: "#/definitions/Pool"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Pool not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - pool
      security:
        - Bearer: []
    delete:
      operationId: PoolDelete
      description: Deletes a pool.
      responses:
        "200":
          description: Pool deleted
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "403":
          description: Pool still has apps
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Pool not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - pool
      security:
        - Bearer: []
    put:
      operationId: PoolUpdate
      description: Updates a pool.
      parameters:
        - name: PoolUpdateData
          in: body
          required: true
          schema:
            $ref: "#/definitions/PoolUpdateData"
      consumes:
        - application/json
      responses:
        "200":
          description: Pool updated
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Pool not found
          schema:
            $ref: "#/definitions/ErrorMessage"
        "409":
          description: Default pool already defined
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - pool
      security:
        - Bearer: []
  /1.3/provisioner/clusters:
    get:
      operationId: ClusterList
      description: List cluster
      produces:
      - application/json
      responses:
        '200':
          description: Cluster
          schema:
            type: array
            items:
              $ref: '#/definitions/Cluster'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
        '404':
          description: Cluster not found
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - cluster
      security:
        - Bearer: []
    post:
      operationId: ClusterCreate
      description: Create cluster.
      parameters:
        - name: ClusterCreateData
          in: body
          required: true
          schema:
            $ref: '#/definitions/Cluster'
      consumes:
      - application/json
      produces:
      - application/x-json-stream
      responses:
        '200':
          description: Cluster created
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
        '404':
          description: Cluster not found
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - cluster
      security:
        - Bearer: []
  /1.3/provisioner/clusters/{cluster_name}:
    parameters:
      - name: cluster_name
        in: path
        required: true
        type: string
        minLength: 1
        description: Cluster name.
    delete:
      operationId: ClusterDelete
      description: Delete cluster.
      produces:
      - application/x-json-stream
      responses:
        '200':
          description: Cluster deleted
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
        '404':
          description: Cluster not found
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - cluster
      security:
        - Bearer: []
  /1.4/provisioner/clusters/{cluster_name}:
    parameters:
      - name: cluster_name
        in: path
        required: true
        type: string
        minLength: 1
        description: Cluster name.
    post:
      operationId: ClusterUpdate
      description: Update cluster.
      parameters:
        - name: ClusterUpdateData
          in: body
          required: true
          schema:
            $ref: '#/definitions/Cluster'
      consumes:
      - application/json
      produces:
      - application/x-json-stream
      responses:
        '200':
          description: Cluster updated
        '400':
          description: Invalid data
          schema:
            $ref: '#/definitions/ErrorMessage'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
        '404':
          description: Cluster not found
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - cluster
      security:
        - Bearer: []
  /1.8/provisioner/clusters/{cluster_name}:
   get:
     tags:
     - "cluster"
     description: "Cluster info"
     operationId: "ClusterInfo"
     produces:
     - "application/json"
     parameters:
     - name: "cluster_name"
       in: "path"
       description: "Cluster name."
       required: true
       type: "string"
       minLength: 1
       x-exportParamName: "ClusterName"
     responses:
       200:
         description: "Cluster"
         schema:
           type: "object"
           $ref: "#/definitions/Cluster"
       401:
         description: "Unauthorized"
         schema:
           $ref: "#/definitions/ErrorMessage"
       404:
         description: "Cluster not found"
         schema:
           $ref: "#/definitions/ErrorMessage"
     security:
     - Bearer: []
  /1.4/volumes/{volume}:
    parameters:
      - name: volume
        in: path
        required: true
        type: string
        minLength: 1
        description: Volume name.
    delete:
      operationId: VolumeDelete
      description: Delete volume.
      produces:
        - application/json
      responses:
        "200":
          description: Volume deleted
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Volume not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - volume
      security:
        - Bearer: []
    get:
      operationId: VolumeGet
      description: Get a volume.
      produces:
        - application/json
      responses:
        "200":
          description: Volume
          schema:
            $ref: "#/definitions/Volume"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "409":
          description: Volume already exists
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - volume
      security:
        - Bearer: []
  /1.4/volumes/{volume}/bind:
    parameters:
      - name: volume
        in: path
        required: true
        type: string
        minLength: 1
        description: Volume name.
      - name: BindData
        in: body
        schema:
          $ref: "#/definitions/VolumeBindData"
    post:
      operationId: VolumeBind
      description: Bind volume.
      produces:
        - application/json
      responses:
        "200":
          description: Volume bind
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Volume not found
          schema:
            $ref: "#/definitions/ErrorMessage"
        "409":
          description: Volume bind already exists
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - volume
      security:
        - Bearer: []
    delete:
      operationId: VolumeUnbind
      description: Unbind volume.
      produces:
        - application/json
      responses:
        "200":
          description: Volume unbinded
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Volume not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - volume
      security:
        - Bearer: []
  /1.4/volumeplans:
    get:
      operationId: VolumePlansList
      description: List volume plans.
      produces:
        - application/json
      responses:
        "200":
          description: Volume plans list
          schema:
            $ref: "#/definitions/VolumePlansListResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - volume
      security:
        - Bearer: []
  /1.6/roles/{role_name}/token:
    post:
      operationId: AssignRoleToToken
      description: Assigns a role to a team token.
      consumes:
        - application/json
      parameters:
        - name: role_name
          required: true
          in: path
          type: string
        - name: token
          required: true
          in: body
          schema:
            $ref: "#/definitions/AssignTokenArgs"
      responses:
        "200":
          description: Role assigned.
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Role or token not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - auth
      security:
        - Bearer: []
  /1.6/roles/{role_name}/token/{token_id}:
    delete:
      operationId: DissociateRoleFromToken
      description: Dissociates a role from a team token.
      parameters:
        - name: role_name
          required: true
          in: path
          type: string
        - name: token_id
          required: true
          in: path
          type: string
        - name: context
          required: true
          in: query
          type: string
      responses:
        "200":
          description: Role dissociated.
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Role or token not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - auth
      security:
        - Bearer: []
  /1.6/tokens:
    get:
      operationId: TeamTokensList
      description: List team tokens.
      produces:
        - application/json
      responses:
        "200":
          description: Team tokens list.
          schema:
            type: array
            items:
              type: object
              $ref: "#/definitions/TeamToken"
        "204":
          description: No content.
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - auth
      security:
        - Bearer: []
    post:
      operationId: TeamTokenCreate
      description: Creates a team token.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: token
          required: true
          in: body
          schema:
            $ref: "#/definitions/TeamTokenCreateArgs"
      responses:
        "201":
          description: Team token created.
          schema:
            $ref: "#/definitions/TeamToken"
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
        "409":
          description: Token with the same ID already exists.
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - auth
      security:
        - Bearer: []
  /1.6/tokens/{token_id}:
    parameters:
      - name: token_id
        in: path
        required: true
        type: string
        minLength: 1
        description: Token ID.
    delete:
      operationId: TeamTokenDelete
      description: Deletes a team token.
      responses:
        "200":
          description: Team token deleted.
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Team token not found.
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - auth
      security:
        - Bearer: []
    put:
      operationId: TeamTokenUpdate
      description: Updates a team token.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: token
          required: true
          in: body
          schema:
            $ref: "#/definitions/TeamTokenUpdateArgs"
      responses:
        "200":
          description: Team token updated.
          schema:
            $ref: "#/definitions/TeamToken"
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Team token not found.
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - auth
      security:
        - Bearer: []
  /1.7/tokens/{token_id}:
    parameters:
      - name: token_id
        in: path
        required: true
        type: string
        minLength: 1
        description: Token ID.
    get:
      operationId: TeamTokenInfo
      description: Shows information about a specific token.
      responses:
        "200":
          description: Team token info.
          schema:
            $ref: "#/definitions/TeamToken"
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Team token not found.
          schema:
            $ref: "#/definitions/ErrorMessage"
      produces:
        - application/json
      tags:
        - auth
      security:
        - Bearer: []
  /1.1/events/{eventid}/cancel:
    post:
      operationId: EventCancel
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: eventid
          required: true
          in: path
          type: string
        - name: cancel
          required: true
          in: body
          schema:
            $ref: "#/definitions/EventCancelArgs"
      responses:
        "204":
          description: Event cancelation requested.
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Event not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - event
      security:
        - Bearer: []
  /1.6/events/webhooks:
    get:
      operationId: WebhookList
      produces:
        - application/json
      responses:
        "200":
          description: Webhooks list.
          schema:
            type: array
            items:
              type: object
              $ref: "#/definitions/Webhook"
        "204":
          description: No content.
      tags:
        - event
      security:
        - Bearer: []
    post:
      operationId: WebhookCreate
      consumes:
        - application/json
      parameters:
        - name: webhook
          required: true
          in: body
          schema:
            $ref: "#/definitions/Webhook"
      responses:
        "200":
          description: Webhook created.
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
        "409":
          description: Webhook already exists.
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - event
      security:
        - Bearer: []
  /1.6/events/webhooks/{name}:
    parameters:
      - name: name
        in: path
        required: true
        type: string
        minLength: 1
        description: Webhook name.
    get:
      operationId: WebhookGet
      produces:
        - application/json
      responses:
        "200":
          description: Webhook.
          schema:
            type: object
            $ref: "#/definitions/Webhook"
        "404":
          description: Not founds.
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - event
      security:
        - Bearer: []
    put:
      operationId: WebhookUpdate
      consumes:
        - application/json
      parameters:
        - name: webhook
          required: true
          in: body
          schema:
            $ref: "#/definitions/Webhook"
      responses:
        "200":
          description: Webhook updated.
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Webhook not found.
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - event
      security:
        - Bearer: []
    delete:
      operationId: WebhookDelete
      responses:
        "200":
          description: Webhook created.
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Webhook not found.
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - event
      security:
        - Bearer: []
  /1.7/provisioner:
    get:
      operationId: ProvisionerList
      description: List provisioners
      produces:
      - application/json
      responses:
        '200':
          description: Provisioner
          schema:
            type: array
            items:
              $ref: '#/definitions/Provisioner'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorMessage'
      tags:
        - cluster
      security:
        - Bearer: []
  /1.3/constraints:
    get:
      operationId: ConstraintList
      description: List pool constraints
      produces:
        - application/json
      responses:
        "200":
          description: PoolConstraints
          schema:
            type: array
            items:
              type: object
              $ref: "#/definitions/PoolConstraint"
        "204":
          description: No content
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - pool
      security:
        - Bearer: []
    put:
      operationId: ConstraintSet
      description: Update a service instance
      consumes:
        - application/json
      parameters:
        - name: poolConstraint
          in: body
          required: true
          schema:
            $ref: "#/definitions/PoolConstraintSet"
      responses:
        "200":
          description: Pool constraint set
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - pool
      security:
        - Bearer: []
  /1.3/routers:
    get:
      operationId: RouterList
      description: List available routers
      produces:
        - application/json
      responses:
        "200":
          description: Routers
          schema:
            type: array
            items:
              type: object
              $ref: "#/definitions/PlanRouter"
        "204":
          description: No content
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - router
      security:
        - Bearer: []
  /1.8/routers:
    post:
      operationId: RouterCreate
      description: Adds a new dynamic router
      consumes:
        - application/json
      parameters:
        - name: router
          in: body
          required: true
          schema:
            $ref: "#/definitions/DynamicRouter"
      responses:
        "201":
          description: Dynamic router added
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - router
      security:
        - Bearer: []
  /1.8/routers/{name}:
    parameters:
      - name: name
        in: path
        required: true
        type: string
        minLength: 1
        description: Dynamic router name.
    put:
      operationId: RouterUpdate
      description: Updates a dynamic router
      consumes:
        - application/json
      parameters:
        - name: router
          required: true
          in: body
          schema:
            $ref: "#/definitions/DynamicRouter"
      responses:
        "200":
          description: Dynamic router updated
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Dynamic router not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - router
      security:
        - Bearer: []
    delete:
      operationId: RouterDelete
      description: Deletes a dynamic router
      responses:
        "200":
          description: Dynamic router deleted
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Dynamic router not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - router
      security:
        - Bearer: []
  /1.2/nodecontainers:
    post:
      operationId: NodeContainerCreate
      description: Creates container that runs on every node
      consumes:
        - application/json
      parameters:
        - name: nodecontainer
          required: true
          in: body
          schema:
            $ref: "#/definitions/NodeContainer"
      responses:
        "200":
          description: Node container created
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
        "400":
          description: Wrong configuration
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - nodecontainer
      security:
        - Bearer: []
  /1.9/roles/{role_name}/group:
    post:
      operationId: AssignRoleToGroup
      description: Assigns a role to a group.
      consumes:
        - application/json
      parameters:
        - name: role_name
          required: true
          in: path
          type: string
        - name: token
          required: true
          in: body
          schema:
            $ref: "#/definitions/AssignGroupArgs"
      responses:
        "200":
          description: Role assigned.
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Role not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - auth
      security:
        - Bearer: []
  /1.6/roles/{role_name}/group/{group_name}:
    delete:
      operationId: DissociateRoleFromGroup
      description: Dissociates a role from a group.
      parameters:
        - name: role_name
          required: true
          in: path
          type: string
        - name: group_name
          required: true
          in: path
          type: string
        - name: context
          required: true
          in: query
          type: string
      responses:
        "200":
          description: Role dissociated.
        "401":
          description: Unauthorized.
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: Role not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - auth
      security:
        - Bearer: []
  /1.9/apps/{app}/units/autoscale:
    parameters:
      - name: app
        in: path
        required: true
        type: string
        minLength: 1
        description: App name.
    post:
      operationId: AutoScaleAdd
      description: Add new unit autoscale spec.
      parameters:
        - name: autoScaleSpec
          in: body
          required: true
          schema:
            $ref: "#/definitions/AutoScaleSpec"
      consumes:
        - application/json
      responses:
        "200":
          description: AutoScale updated
        "400":
          description: Invalid data
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: App not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - app
      security:
        - Bearer: []
    delete:
      operationId: AutoScaleRemove
      description: Remove unit autoscale spec.
      parameters:
        - name: process
          required: true
          in: query
          type: string
      consumes:
        - application/json
      responses:
        "200":
          description: AutoScale removed
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: App not found
          schema:
            $ref: "#/definitions/ErrorMessage"
      tags:
        - app
      security:
        - Bearer: []
definitions:
  AutoScaleSpec:
    description: Units Auto Scale spec
    type: object
    properties:
      process:
        type: string
      minUnits:
        type: integer
      maxUnits:
        type: integer
      averageCPU:
        type: string
      version:
        type: integer
  DynamicRouter:
    description: Dynamic router
    type: object
    properties:
      name:
        type: string
      type:
        type: string
      config:
        type: object
  PlanRouter:
    description: Plan Router
    type: object
    properties:
      name:
        type: string
      type:
        type: string
      config:
        type: object
      info:
        type: object
        additionalProperties:
          type: string
      default:
        type: boolean
      dynamic:
        type: boolean
  ErrorMessage:
    description: Error message.
    type: string
  Service:
    type: object
    properties:
      service:
        type: string
      instances:
        type: array
        description: "[deprecated]"
        items:
          type: string
      plans:
        type: array
        items:
          type: string
      service_instances:
        type: array
        items:
          type: object
          $ref: "#/definitions/ServiceInstance"
  ServiceInstance:
    type: object
    properties:
      name:
        type: string
      tags:
        type: array
        items:
          type: string
      id:
        type: integer
      service_name:
        type: string
      plan_name:
        type: string
      apps:
        type: array
        items:
          type: string
      bound_units:
        type: array
        items:
          type: object
          $ref: "#/definitions/ServiceInstanceBoundUnit"
      teams:
        type: array
        items:
          type: string
      team_owner:
        type: string
      description:
        type: string
      parameters:
        type: object
        additionalProperties:
          type: string
      pool:
        type: string
  ServiceInstanceBoundUnit:
    type: object
    properties:
      app_name:
        type: string
      id:
        type: string
      ip:
        type: string
  ServiceInstanceInfo:
    type: object
    properties:
      apps:
        type: array
        items:
          type: string
      teams:
        type: array
        items:
          type: string
      teamowner:
        type: string
      description:
        type: string
      planname:
        type: string
      plandescription:
        type: string
      tags:
        type: array
        items:
          type: string
      custominfo:
        type: object
        additionalProperties:
          type: string
  ServiceInstanceUpdateData:
    type: object
    properties:
      description:
        type: string
      teamowner:
        type: string
      plan:
        type: string
      tags:
        type: array
        items:
          type: string
      parameters:
        type: object
        additionalProperties:
          type: string
  ServiceInstanceBind:
    type: object
    properties:
      noRestart:
        type: boolean
      parameters:
        type: object
        additionalProperties:
          type: string
  ServiceInstanceUnbind:
    type: object
    properties:
      noRestart:
        type: boolean
      force:
        type: boolean
  Pool:
    type: object
    properties:
      name:
        type: string
      default:
        type: boolean
      provisioner:
        type: string
      public:
        type: boolean
      teams:
        type: array
        items:
          type: string
      allowed:
        type: object
        additionalProperties:
          type: array
          items:
            type: string
  PoolCreateData:
    type: object
    properties:
      name:
        type: string
      public:
        type: boolean
      default:
        type: boolean
      force:
        type: boolean
      provisioner:
        type: string
  PoolUpdateData:
    type: object
    properties:
      default:
        type: boolean
      public:
        type: boolean
      force:
        type: boolean
  NodeUpdateData:
    type: object
    properties:
      address:
        type: string
      pool:
        type: string
      metadata:
        type: object
        additionalProperties:
          type: string
      enable:
        type: boolean
      disable:
        type: boolean
  NodeAddData:
    type: object
    properties:
      address:
        type: string
      cacert:
        description: Docker API CA certificate.
        type: string
      clientcert:
        description: Docker API client certificate.
        type: string
      clientkey:
        description: Docker API client key.
        type: string
      register:
        description: Register an existing node.
        type: boolean
      waitto:
        description: Timeout in nanoseconds.
        type: integer
        format: int64
      metadata:
        type: object
        additionalProperties:
          type: string
  NodeGetResponse:
    type: object
    properties:
      node:
        type: object
        $ref: "#/definitions/Node"
      status:
        type: object
        $ref: "#/definitions/NodeStatus"
      units:
        type: object
        $ref: "#/definitions/Unit"
  NodeListResponse:
    type: object
    properties:
      nodes:
        type: array
        items:
          type: object
          $ref: "#/definitions/Node"
      machines:
        type: array
        items:
          type: object
          $ref: "#/definitions/Machine"
  Node:
    type: object
    properties:
      address:
        type: string
      iaasid:
        type: string
      status:
        type: string
      pool:
        type: string
      provisioner:
        type: string
      metadata:
        type: object
        additionalProperties:
          type: string
  NodeStatus:
    type: object
    properties:
      address:
        type: string
      checks:
        type: array
        items:
          type: object
          $ref: "#/definitions/NodeCheck"
      lastsuccess:
        type: string
        format: date-time
      lastupdate:
        type: string
        format: date-time
  NodeCheck:
    type: object
    properties:
      time:
        type: string
        format: date-time
      checks:
        type: array
        items:
          type: object
          $ref: "#/definitions/NodeCheckResult"
  NodeCheckResult:
    type: object
    properties:
      name:
        type: string
      err:
        type: string
      successful:
        type: boolean
  Machine:
    type: object
    properties:
      id:
        type: string
      iaas:
        type: string
      address:
        type: string
      port:
        type: integer
      protocol:
        type: string
      creationparams:
        type: object
        additionalProperties:
          type: string
  RoleUser:
    description: Role of an user.
    type: object
    properties:
      name:
        type: string
      contexttype:
        type: string
      contextvalue:
        type: string
      group:
        type: string
  PermissionUser:
    description: Permission of an user.
    type: object
    properties:
      name:
        type: string
      contexttype:
        type: string
      contextvalue:
        type: string
      group:
        type: string
  User:
    description: User object.
    type: object
    properties:
      email:
        type: string
      roles:
        type: array
        items:
          type: object
          $ref: "#/definitions/RoleUser"
      groups:
        type: array
        items:
          type: string
      permissions:
        type: array
        items:
          type: object
          $ref: "#/definitions/PermissionUser"
  SSHKeyListResponse:
    description: Response returned by User SSH Key List.
    type: object
    properties:
      keyname:
        type: string
        description: keyvalue
  UserData:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
  ChangePasswordData:
    type: object
    properties:
      confirm:
        type: string
      new:
        type: string
      old:
        type: string
  SSHKeyAddData:
    type: object
    properties:
      force:
        type: boolean
      key:
        type: string
      keyname:
        type: string
  UserQuotaViewResponse:
    description: Response returned by User Quota View.
    type: object
    properties:
      inuse:
        type: integer
      limit:
        type: integer
  VolumePlansListResponse:
    description: Response returned by Volume Plans list.
    type: object
    additionalProperties:
      type: object
      $ref: "#/definitions/VolumePlan"
  Volume:
    description: Volume
    type: object
    properties:
      name:
        type: string
        description: Volume name.
      pool:
        type: string
        description: Volume pool.
      teamOwner:
        type: string
        description: Team that owns the volume.
      status:
        type: string
        description: Volume status.
      plan:
        type: object
        description: Volume plan.
        $ref: "#/definitions/VolumePlan"
      binds:
        type: array
        description: Volume binds.
        items:
          type: object
          $ref: "#/definitions/VolumeBind"
      opts:
        type: object
        description: Custom volume options.
        additionalProperties:
          type: string
  VolumePlan:
    description: Volume plan.
    type: object
    properties:
      name:
        description: Volume plan name.
        type: string
      opts:
        description: Volume plan opts.
        type: object
        additionalProperties:
          type: string
  VolumeBind:
    type: object
    properties:
      id:
        description: Volume bind ID.
        type: object
        $ref: "#/definitions/VolumeBindID"
      readonly:
        description: Volume is read-only.
        type: boolean
  VolumeBindID:
    type: object
    properties:
      app:
        description: App the volume is bound to.
        type: string
      mountpoint:
        description: Volume mountpoint.
        type: string
      volume:
        description: Volume name.
        type: string
  VolumeBindData:
    type: object
    properties:
      mountpoint:
        type: string
      norestart:
        type: boolean
      readonly:
        type: boolean
  App:
    description: Tsuru app.
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: App name.
      tags:
        type: array
        items:
          type: string
        description: App tags.
      router:
        type: string
        description: App router.
      routeropts:
        type: object
        additionalProperties:
          type: string
        description: Custom router options.
      plan:
        type: object
        $ref: "#/definitions/Plan"
      pool:
        type: string
        description: App pool.
      platform:
        type: string
        description: App platform.
      description:
        type: string
        description: App description.
      teamOwner:
        type: string
        description: Team that owns the app.
      teams:
        type: array
        items:
          type: string
      cname:
        type: array
        items:
          type: string
      ip:
        type: string
      owner:
        type: string
      autoscale:
        type: array
        items:
          type: object
          $ref: "#/definitions/AutoScaleSpec"
  UpdateApp:
    type: object
    properties:
      tags:
        type: array
        items:
          type: string
        description: App tags.
      plan:
        type: string
        description: App plan name.
      planoverride:
        type: object
        $ref: "#/definitions/PlanOverride"
      pool:
        type: string
        description: App pool name.
      platform:
        type: string
        description: App platform.
      description:
        type: string
        description: App description.
      teamOwner:
        type: string
        description: Team that owns the app.
      noRestart:
        type: boolean
        description: Prevent app restart.
      imageReset:
        type: boolean
        description: Reset app image to platform base image.
  InputApp:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: App name.
      tags:
        type: array
        items:
          type: string
        description: App tags.
      router:
        type: string
        description: App router name.
      routeropts:
        type: object
        additionalProperties:
          type: string
        description: Custom router options.
      plan:
        type: string
        description: App plan name.
      pool:
        type: string
        description: App pool name.
      platform:
        type: string
        description: App platform.
      description:
        type: string
        description: App description.
      teamOwner:
        type: string
        description: Team that owns the app.
  AppCreateResponse:
    description: Newly created app information.
    type: object
    properties:
      status:
        type: string
      repository_url:
        type: string
      ip:
        type: string
  MiniApp:
    description: List containing minimal information about apps.
    type: object
    properties:
      name:
        type: string
      pool:
        type: string
      teamOwner:
        type: string
      plan:
        type: object
        $ref: "#/definitions/Plan"
      units:
        type: array
        items:
          type: object
          $ref: "#/definitions/Unit"
      cname:
        type: array
        items:
          type: string
      ip:
        type: string
      routers:
        type: array
        items:
          type: object
          $ref: "#/definitions/Router"
      lock:
        type: object
        $ref: "#/definitions/Lock"
      tags:
        type: array
        items:
          type: string
      error:
        type: string
  Plan:
    description: App plan.
    type: object
    properties:
      name:
        type: string
      memory:
        type: integer
        format: int64
        minimum: 0
      swap:
        type: integer
        format: int64
        minimum: 0
      cpushare:
        type: integer
        minimum: 0
      cpumilli:
        type: integer
        minimum: 0
      default:
        type: boolean
      router:
        type: string
      override:
        type: object
        $ref: "#/definitions/PlanOverride"
  PlanOverride:
    description: App plan override.
    type: object
    properties:
      memory:
        type: integer
        format: int64
        x-go-custom-type: "*int64"
      cpumilli:
        type: integer
        x-go-custom-type: "*int"
  Env:
    description: Environment variable.
    type: object
    properties:
      name:
        type: string
      value:
        type: string
      alias:
        type: string
  EnvSetData:
    description: Data sent to the environment set endpoint.
    type: object
    properties:
      envs:
        type: array
        items:
          type: object
          $ref: "#/definitions/Env"
        minItems: 1
      norestart:
        type: boolean
      private:
        type: boolean
  EnvSetResponse:
    description: Environment variables response information.
    type: array
    items:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        public:
          type: boolean
  Unit:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      appname:
        type: string
      processname:
        type: string
      type:
        type: string
      ip:
        type: string
      status:
        type: string
      address:
        type: object
        $ref: "#/definitions/URL"
  Router:
    type: object
    properties:
      name:
        type: string
      opts:
        type: object
        additionalProperties:
          type: string
      address:
        type: string
      type:
        type: string
      status:
        type: string
      status-detail:
        type: string
  Lock:
    type: object
    properties:
      locked:
        type: boolean
      reason:
        type: string
      owner:
        type: string
      acquireDate:
        type: string
  URL:
    type: object
    properties:
      scheme:
        type: string
      host:
        type: string
  Team:
    type: object
    properties:
      name:
        type: string
      tags:
        type: array
        items:
          type: string
      permissions:
        type: array
        items:
          type: string
  TeamCreateArgs:
    type: object
    properties:
      name:
        type: string
      tags:
        type: array
        items:
          type: string
  TeamUpdateArgs:
    type: object
    properties:
      newname:
        type: string
      tags:
        type: array
        items:
          type: string
  TeamInfo:
    type: object
    properties:
      name:
        type: string
      tags:
        type: array
        items:
          type: string
      users:
        type: array
        items:
          type: object
          $ref: "#/definitions/User"
      pools:
        type: array
        items:
          type: object
          $ref: "#/definitions/Pool"
      apps:
        type: array
        items:
          type: object
          $ref: "#/definitions/App"
  TeamTokenUpdateArgs:
    description: Arguments for updating an existing team token.
    properties:
      regenerate:
        type: boolean
      description:
        type: string
      expires_in:
        description: Expire time in seconds, using a negative value removes the expiration.
        type: integer
        format: int64
  TeamTokenCreateArgs:
    description: Arguments for creating a new team token.
    type: object
    properties:
      token_id:
        type: string
      description:
        type: string
      expires_in:
        description: Expire time in seconds.
        type: integer
        format: int64
      team:
        type: string
  TeamToken:
    description: An authorization token associated to a team.
    type: object
    properties:
      token:
        type: string
      token_id:
        type: string
      description:
        type: string
      created_at:
        type: string
        format: date-time
      expires_at:
        type: string
        format: date-time
      last_access:
        type: string
        format: date-time
      creator_email:
        type: string
      team:
        type: string
      roles:
        type: array
        items:
          type: object
          $ref: "#/definitions/RoleInstance"
  RoleInstance:
    description: Association between a role and a context value.
    type: object
    properties:
      name:
        type: string
      contextvalue:
        type: string
  AssignTokenArgs:
    description: Assign role to token arguments.
    type: object
    properties:
      token_id:
        type: string
      context:
        type: string
  AssignGroupArgs:
    description: Assign role to group arguments.
    type: object
    properties:
      group_name:
        type: string
      context:
        type: string
  Platform:
    type: object
    properties:
      name:
        type: string
      disabled:
        type: boolean
  PlatformInfo:
    type: object
    properties:
      platform:
        type: object
        $ref: "#/definitions/Platform"
      images:
        type: array
        items:
          type: string
  EventCancelArgs:
    type: object
    properties:
      reason:
        type: string
  Webhook:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      team_owner:
        type: string
      event_filter:
        type: object
        $ref: "#/definitions/WebhookEventFilter"
      url:
        type: string
      proxy_url:
        type: string
      headers:
        type: object
        additionalProperties:
          type: array
          items:
            type: string
      method:
        type: string
      body:
        type: string
      insecure:
        type: boolean
  WebhookEventFilter:
    type: object
    properties:
      target_types:
        type: array
        items:
          type: string
      target_values:
        type: array
        items:
          type: string
      kind_types:
        type: array
        items:
          type: string
      kind_names:
        type: array
        items:
          type: string
      error_only:
        type: boolean
      success_only:
        type: boolean
  ServiceBrokerList:
    type: object
    properties:
      brokers:
        type: array
        items:
          type: object
          $ref: "#/definitions/ServiceBroker"
  ServiceBroker:
    type: object
    properties:
      Name:
        type: string
      URL:
        type: string
      Config:
        properties:
          Insecure:
            type: boolean
          Context:
            type: object
            additionalProperties:
              type: string
          AuthConfig:
            type: object
            properties:
              BasicAuthConfig:
                type: object
                properties:
                  username:
                    type: string
                  password:
                    type: string
              BearerConfig:
                type: object
                properties:
                  token:
                    type: string
          CacheExpirationSeconds:
            type: integer
  Cluster:
    type: object
    properties:
      name:
        type: string
      addresses:
        type: array
        items:
          type: string
      provisioner:
        type: string
      cacert:
        type: string
        format: byte
        x-go-custom-type: "[]byte"
      clientcert:
        type: string
        format: byte
        x-go-custom-type: "[]byte"
      clientkey:
        type: string
        format: byte
        x-go-custom-type: "[]byte"
      pools:
        type: array
        items:
          type: string
      custom_data:
        type: object
        additionalProperties:
          type: string
      create_data:
        type: object
        additionalProperties:
          type: string
      default:
        type: boolean
  Quota:
    type: object
    properties:
      inuse:
        type: integer
        format: int64
      limit:
        type: integer
        format: int64
  Provisioner:
    type: object
    properties:
      name:
        type: string
      cluster_help:
        type: object
        $ref: "#/definitions/ClusterHelp"
  ClusterHelp:
    type: object
    properties:
      provisioner_help:
        type: string
      custom_data_help:
        type: object
        additionalProperties:
          type: string
      create_data_help:
        type: object
        additionalProperties:
          type: string
  SetRoutableArgs:
    type: object
    properties:
      version:
        type: string
      isRoutable:
        type: boolean
  PoolConstraint:
    type: object
    properties:
      PoolExpr:
        type: string
      Field:
        type: string
      Values:
        type: array
        items:
          type: string
      Blacklist:
        type: boolean
  PoolConstraintSet:
    type: object
    properties:
      append:
        type: boolean
      PoolExpr:
        type: string
      Field:
        type: string
      Values:
        type: array
        items:
          type: string
      Blacklist:
        type: boolean
  NodeContainer:
    description: Data sent to set up a node container
    type: object
    required:
      - name
    properties:
      name:
        type: string
      pool:
        type: string
      config:
        type: object
        properties:
          env:
            type: array
            items:
              type: string
